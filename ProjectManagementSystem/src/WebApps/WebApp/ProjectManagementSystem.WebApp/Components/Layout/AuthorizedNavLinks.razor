@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.Shared.Common.Constants
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="organizations">
                <span class="bi bi-building-nav-menu" aria-hidden="true"></span> Organizations
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="projects">
                <span class="bi bi-folder-nav-menu" aria-hidden="true"></span> Projects
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tasks">
                <span class="bi bi-list-check-nav-menu" aria-hidden="true"></span> Tasks
            </NavLink>
        </div>

        <!-- User Management - Only for SystemAdmin -->
        @if (showUserManagement)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="bi bi-people-nav-menu" aria-hidden="true"></span> Users
                </NavLink>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool showUserManagement = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userRole = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            Console.WriteLine($"[AuthorizedNavLinks] User role: '{userRole}', Expected: '{Roles.SystemAdmin}'");
            showUserManagement = userRole == Roles.SystemAdmin;
            Console.WriteLine($"[AuthorizedNavLinks] Show user management: {showUserManagement}");
        }
    }
}