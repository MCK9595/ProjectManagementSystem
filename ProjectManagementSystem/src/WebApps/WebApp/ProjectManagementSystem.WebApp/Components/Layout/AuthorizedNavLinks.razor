@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.Shared.Common.Constants
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<AuthorizedNavLinks> Logger

<AuthorizeView>
    <Authorized>
        <div class="nav-category">プロジェクト管理</div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link animate-slide-in-left animate-delay-100" href="organizations">
                <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span> 組織
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link animate-slide-in-left animate-delay-200" href="projects">
                <span class="bi bi-kanban-fill-nav-menu" aria-hidden="true"></span> プロジェクト
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link animate-slide-in-left animate-delay-300" href="tasks">
                <span class="bi bi-clipboard-check-fill-nav-menu" aria-hidden="true"></span> タスク
            </NavLink>
        </div>

        <!-- User Management - Only for SystemAdmin -->
        @if (showUserManagement)
        {
            <div class="nav-category">システム管理</div>
            <div class="nav-item px-3">
                <NavLink class="nav-link animate-slide-in-left animate-delay-500" href="users">
                    <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span> ユーザー管理
                    <span class="nav-badge admin-badge">Admin</span>
                </NavLink>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool showUserManagement = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userRole = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            Logger.LogDebug("User role: {UserRole}, Expected: {ExpectedRole}", userRole, Roles.SystemAdmin);
            showUserManagement = userRole == Roles.SystemAdmin;
            Logger.LogDebug("Show user management: {ShowUserManagement}", showUserManagement);
        }
    }
}