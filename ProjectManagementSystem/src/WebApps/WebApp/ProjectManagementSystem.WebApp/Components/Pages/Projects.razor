@page "/projects"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@using ProjectManagementSystem.Shared.Common.Constants

@attribute [Authorize]
@inject IProjectService ProjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop

<PageTitle>Projects - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Projects</h2>
                <button class="btn btn-primary" @onclick="NavigateToCreate">
                    <i class="bi bi-plus-circle"></i> Create Project
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (projects?.Items?.Any() == true)
            {
                <div class="row">
                    @foreach (var project in projects.Items)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="card-title mb-0">@project.Name</h6>
                                    <span class="badge @GetStatusBadgeClass(project.Status)">@project.Status</span>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">@(project.Description ?? "No description provided")</p>
                                    
                                    <div class="row text-center mb-3">
                                        <div class="col">
                                            <small class="text-muted">Priority</small>
                                            <div class="fw-bold">
                                                <span class="badge @GetPriorityBadgeClass(project.Priority)">@project.Priority</span>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <small class="text-muted">Due Date</small>
                                            <div class="fw-bold">@(project.EndDate?.ToString("MMM dd") ?? "No due date")</div>
                                        </div>
                                    </div>

                                    @if (project.StartDate.HasValue || project.EndDate.HasValue)
                                    {
                                        <div class="mb-3">
                                            <small class="text-muted">Timeline</small>
                                            <div class="small">
                                                @if (project.StartDate.HasValue)
                                                {
                                                    <span>@project.StartDate.Value.ToString("MMM dd, yyyy")</span>
                                                }
                                                @if (project.StartDate.HasValue && project.EndDate.HasValue)
                                                {
                                                    <span> - </span>
                                                }
                                                @if (project.EndDate.HasValue)
                                                {
                                                    <span>@project.EndDate.Value.ToString("MMM dd, yyyy")</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewProject(project.Id)">
                                            <i class="bi bi-eye"></i> View
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditProject(project.Id)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProject(project.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (projects.TotalCount > projects.PageSize)
                {
                    <nav aria-label="Projects pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(projects.PageNumber <= 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(projects.PageNumber - 1)" disabled="@(projects.PageNumber <= 1)">
                                    Previous
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, projects.PageNumber - 2); i <= Math.Min(projects.TotalPages, projects.PageNumber + 2); i++)
                            {
                                <li class="page-item @(i == projects.PageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                </li>
                            }
                            
                            <li class="page-item @(projects.PageNumber >= projects.TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => LoadPage(projects.PageNumber + 1)" disabled="@(projects.PageNumber >= projects.TotalPages)">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-folder" style="font-size: 3rem; color: #6c757d;"></i>
                        <h5 class="mt-3">No projects found</h5>
                        <p class="text-muted">Get started by creating your first project.</p>
                        <button class="btn btn-primary" @onclick="NavigateToCreate">
                            <i class="bi bi-plus-circle"></i> Create Project
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<ProjectDto>? projects;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects(int pageNumber = 1)
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetProjectsAsync(pageNumber, 9); // 9 for 3x3 grid
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        await LoadProjects(pageNumber);
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/projects/create", forceLoad: true);
    }

    private void ViewProject(Guid id)
    {
        Navigation.NavigateTo($"/projects/{id}");
    }

    private void EditProject(Guid id)
    {
        Navigation.NavigateTo($"/projects/{id}/edit");
    }

    private async Task DeleteProject(Guid id)
    {
        if (await JSInterop.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project?"))
        {
            var success = await ProjectService.DeleteProjectAsync(id);
            if (success)
            {
                await LoadProjects(projects?.PageNumber ?? 1);
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            ProjectManagementSystem.Shared.Common.Constants.ProjectStatus.Active => "bg-success",
            ProjectManagementSystem.Shared.Common.Constants.ProjectStatus.Completed => "bg-primary",
            ProjectManagementSystem.Shared.Common.Constants.ProjectStatus.OnHold => "bg-warning",
            ProjectManagementSystem.Shared.Common.Constants.ProjectStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            Priority.High => "bg-danger",
            Priority.Medium => "bg-warning",
            Priority.Low => "bg-info",
            _ => "bg-secondary"
        };
    }
}