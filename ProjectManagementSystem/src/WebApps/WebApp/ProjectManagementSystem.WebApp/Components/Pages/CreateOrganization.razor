@page "/organizations/create"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@attribute [Authorize]
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation
@inject ILogger<CreateOrganization> Logger

<PageTitle>Create Organization - Project Management System</PageTitle>

<div class="container">
    @if (!pageLoaded)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading page...</span>
            </div>
            <p class="mt-3">Initializing create organization page...</p>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4>Create New Organization</h4>
                        <button class="btn btn-outline-secondary" @onclick="GoBack">
                            <i class="bi bi-arrow-left"></i> Back
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="@createModel" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="name" class="form-label">Organization Name <span class="text-danger">*</span></label>
                            <InputText id="name" @bind-Value="createModel.Name" class="form-control" placeholder="Enter organization name" />
                            <ValidationMessage For="@(() => createModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" @bind-Value="createModel.Description" class="form-control" rows="4" placeholder="Enter organization description" />
                            <ValidationMessage For="@(() => createModel.Description)" />
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="GoBack">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Create Organization
                            </button>
                        </div>
                    </EditForm>
                </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CreateOrganizationDto createModel = new() { Name = "", Description = "" };
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool pageLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogDebug("CreateOrganization page initializing");
            pageLoaded = true;
            Logger.LogDebug("CreateOrganization page initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing CreateOrganization page");
            errorMessage = "Failed to initialize page. Please refresh and try again.";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            Logger.LogDebug("HandleSubmit called for organization creation");
            isLoading = true;
            errorMessage = string.Empty;

            Logger.LogDebug("Calling OrganizationService.CreateOrganizationAsync with model: Name={Name}, Description={Description}", 
                createModel.Name, createModel.Description);
            
            var result = await OrganizationService.CreateOrganizationAsync(createModel);
            
            if (result != null)
            {
                Logger.LogDebug("Organization created successfully with ID: {OrganizationId}", result.Id);
                Navigation.NavigateTo("/organizations");
            }
            else
            {
                Logger.LogWarning("CreateOrganizationAsync returned null result");
                errorMessage = "Failed to create organization. Please try again.";
            }
        }
        catch (InvalidOperationException ex)
        {
            // 重複エラーの場合
            errorMessage = ex.Message;
            Logger.LogWarning("Organization creation failed due to duplicate name: {OrganizationName}", createModel.Name);
        }
        catch (ArgumentException ex)
        {
            // バリデーションエラーの場合
            errorMessage = $"Validation error: {ex.Message}";
            Logger.LogWarning("Organization creation failed due to validation error: {ValidationError}", ex.Message);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception in HandleSubmit for organization creation - Type: {ExceptionType}, Message: {Message}", 
                ex.GetType().Name, ex.Message);
            errorMessage = "An error occurred while creating the organization. Please try again.";
        }
        finally
        {
            isLoading = false;
            Logger.LogDebug("HandleSubmit completed, isLoading set to false");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/organizations");
    }
}