@page "/auth-debug"
@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.Shared.Common.Services
@using ProjectManagementSystem.WebApp.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject ISessionTokenService SessionTokenService
@inject ILogger<AuthDebug> Logger

<PageTitle>Authentication Debug</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>Authentication Debug Information</h2>
            <p class="text-muted">This page helps diagnose authentication issues.</p>
            
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Authentication State</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Is Authenticated:</strong> 
                            <span class="badge @(isAuthenticated ? "bg-success" : "bg-danger")">
                                @(isAuthenticated ? "Yes" : "No")
                            </span>
                        </div>
                        <div class="col-md-6">
                            <strong>User Name:</strong> 
                            <span class="text-info">@(userName ?? "Not Available")</span>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <strong>User ID:</strong> 
                            <span class="text-info">@(userId ?? "Not Available")</span>
                        </div>
                        <div class="col-md-6">
                            <strong>User Role:</strong> 
                            <span class="text-info">@(userRole ?? "Not Available")</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h5>Token Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Token Available:</strong> 
                            <span class="badge @(hasToken ? "bg-success" : "bg-danger")">
                                @(hasToken ? "Yes" : "No")
                            </span>
                        </div>
                        <div class="col-md-6">
                            <strong>Token Length:</strong> 
                            <span class="text-info">@(tokenLength > 0 ? tokenLength.ToString() : "N/A")</span>
                        </div>
                    </div>
                    @if (hasToken)
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <strong>Token Preview:</strong>
                                <code class="d-block mt-1 p-2 bg-light">@tokenPreview</code>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h5>User Details</h5>
                </div>
                <div class="card-body">
                    @if (currentUser != null)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Username:</strong> <span class="text-info">@currentUser.Username</span>
                            </div>
                            <div class="col-md-6">
                                <strong>Email:</strong> <span class="text-info">@currentUser.Email</span>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <strong>First Name:</strong> <span class="text-info">@currentUser.FirstName</span>
                            </div>
                            <div class="col-md-6">
                                <strong>Last Name:</strong> <span class="text-info">@currentUser.LastName</span>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-md-6">
                                <strong>Role:</strong> <span class="text-info">@currentUser.Role</span>
                            </div>
                            <div class="col-md-6">
                                <strong>Is Active:</strong> 
                                <span class="badge @(currentUser.IsActive ? "bg-success" : "bg-danger")">
                                    @(currentUser.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            No user details available. This could indicate:
                            <ul class="mb-0 mt-2">
                                <li>User is not authenticated</li>
                                <li>Token is invalid or expired</li>
                                <li>API connection issues</li>
                            </ul>
                        </div>
                    }
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h5>Debug Actions</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary me-2" @onclick="RefreshData">
                        <i class="fas fa-sync-alt"></i> Refresh Data
                    </button>
                    <button class="btn btn-info me-2" @onclick="CheckAuthStatus">
                        <i class="fas fa-check-circle"></i> Check Auth Status
                    </button>
                    <button class="btn btn-warning me-2" @onclick="ClearAndRefresh">
                        <i class="fas fa-trash"></i> Clear Token & Refresh
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(debugMessage))
            {
                <div class="alert alert-info">
                    <strong>Debug Message:</strong> @debugMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error:</strong> @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated = false;
    private string? userName;
    private string? userId;
    private string? userRole;
    private bool hasToken = false;
    private int tokenLength = 0;
    private string? tokenPreview;
    private ProjectManagementSystem.Shared.Models.DTOs.UserDto? currentUser;
    private string? debugMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            debugMessage = null;
            errorMessage = null;

            Logger.LogInformation("Auth Debug page: Refreshing authentication data");

            // Get authentication state
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            userName = authState.User.Identity?.Name;
            userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            userRole = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;

            // Get token information
            var token = await SessionTokenService.GetTokenAsync();
            hasToken = !string.IsNullOrEmpty(token);
            tokenLength = token?.Length ?? 0;
            
            if (hasToken && token != null)
            {
                // Show first and last 10 characters for security
                if (token.Length > 20)
                {
                    tokenPreview = $"{token[..10]}...{token[^10..]}";
                }
                else
                {
                    tokenPreview = $"{token[..Math.Min(5, token.Length)]}...";
                }
            }

            // Get current user details
            currentUser = await AuthService.GetCurrentUserAsync();

            Logger.LogInformation("Auth Debug page: Data refresh completed - IsAuth: {IsAuth}, HasToken: {HasToken}, HasUser: {HasUser}",
                isAuthenticated, hasToken, currentUser != null);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error refreshing data: {ex.Message}";
            Logger.LogError(ex, "Error in auth debug page refresh");
        }
    }

    private async Task CheckAuthStatus()
    {
        try
        {
            debugMessage = null;
            errorMessage = null;

            var isAuthenticatedCheck = await AuthService.IsAuthenticatedAsync();
            debugMessage = $"Authentication status check: {(isAuthenticatedCheck ? "Authenticated" : "Not Authenticated")}";
            
            Logger.LogInformation("Auth Debug page: Manual authentication check result: {IsAuth}", isAuthenticatedCheck);
            
            await RefreshData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking auth status: {ex.Message}";
            Logger.LogError(ex, "Error in auth debug page status check");
        }
    }

    private async Task ClearAndRefresh()
    {
        try
        {
            debugMessage = null;
            errorMessage = null;

            Logger.LogInformation("Auth Debug page: Clearing token and refreshing");

            await AuthService.RemoveTokenAsync();
            debugMessage = "Token cleared. Page will refresh authentication data.";
            
            await RefreshData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error clearing token: {ex.Message}";
            Logger.LogError(ex, "Error in auth debug page token clear");
        }
    }
}