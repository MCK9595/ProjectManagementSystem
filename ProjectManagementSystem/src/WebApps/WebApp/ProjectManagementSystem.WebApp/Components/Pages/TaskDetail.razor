@page "/tasks/{id:guid}"
@page "/tasks/{id:guid}/edit"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@using ProjectManagementSystem.Shared.Common.Constants
@using TaskStatusConst = ProjectManagementSystem.Shared.Common.Constants.TaskStatus

@attribute [Authorize]
@inject ITaskService TaskService
@inject IProjectService ProjectService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@(IsEditMode ? "Edit" : "View") Task - Project Management System</PageTitle>

@if (task != null)
{
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4" style="max-width: 100%; overflow: hidden;">
        <div>
            <h2 class="mb-2" style="font-weight: var(--font-weight-semibold); color: var(--color-gray-900);">@(IsEditMode ? "Edit" : "View") Task</h2>
            <p class="text-muted mb-0" style="font-size: var(--font-size-sm);">@task.Title</p>
        </div>
        <div>
            @if (!IsEditMode && CanEditTask())
            {
                <button class="btn btn-outline-primary me-2" @onclick="ToggleEditMode">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            }
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="bi bi-arrow-left"></i> Back
            </button>
        </div>
    </div>

    <!-- Main Content Card -->
    <div class="card mb-4" style="width: 100%; max-width: 100%; overflow: hidden;">
        <div class="card-body">
            @if (IsEditMode)
            {
                <EditForm Model="@updateModel" OnValidSubmit="@HandleUpdate">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="title" class="form-label">Task Title <span class="text-danger">*</span></label>
                                <InputText id="title" @bind-Value="updateModel.Title" class="form-control" />
                                <ValidationMessage For="@(() => updateModel.Title)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" @bind-Value="updateModel.Description" class="form-control" rows="4" />
                                <ValidationMessage For="@(() => updateModel.Description)" />
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="status" class="form-label">Status</label>
                                        <InputSelect id="status" @bind-Value="updateModel.Status" class="form-select">
                                            @foreach (var status in TaskStatusConst.AllStatuses)
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateModel.Status)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="priority" class="form-label">Priority</label>
                                        <InputSelect id="priority" @bind-Value="updateModel.Priority" class="form-select">
                                            @foreach (var priority in Priority.AllPriorities)
                                            {
                                                <option value="@priority">@priority</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateModel.Priority)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="assignedTo" class="form-label">Assign To</label>
                                        <InputSelect id="assignedTo" @bind-Value="updateModel.AssignedToUserId" class="form-select" disabled="@isLoadingMembers">
                                            @if (projectMembers?.Items?.Any() == true)
                                            {
                                                @foreach (var member in projectMembers.Items)
                                                {
                                                    <option value="@member.UserId">@member.User?.Username (@member.User?.Email)</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateModel.AssignedToUserId)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="startDate" class="form-label">Start Date</label>
                                        <InputDate id="startDate" @bind-Value="updateModel.StartDate" class="form-control" />
                                        <ValidationMessage For="@(() => updateModel.StartDate)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="dueDate" class="form-label">Due Date</label>
                                        <InputDate id="dueDate" @bind-Value="updateModel.DueDate" class="form-control" />
                                        <ValidationMessage For="@(() => updateModel.DueDate)" />
                                        @if (updateModel.StartDate.HasValue && updateModel.DueDate.HasValue && updateModel.DueDate < updateModel.StartDate)
                                        {
                                            <div class="text-danger small">Due date must be after start date</div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="estimatedHours" class="form-label">Estimated Hours</label>
                                        <InputNumber id="estimatedHours" @bind-Value="updateModel.EstimatedHours" class="form-control" min="0" step="0.5" />
                                        <ValidationMessage For="@(() => updateModel.EstimatedHours)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="actualHours" class="form-label">Actual Hours</label>
                                        <InputNumber id="actualHours" @bind-Value="updateModel.ActualHours" class="form-control" min="0" step="0.5" />
                                        <ValidationMessage For="@(() => updateModel.ActualHours)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="CancelEdit">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Save Changes
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="row">
                    <div class="col-md-8">
                        <h5>Task Details</h5>
                        <dl class="row">
                            <dt class="col-sm-3">Title:</dt>
                            <dd class="col-sm-9">@task.Title</dd>
                            
                            <dt class="col-sm-3">Description:</dt>
                            <dd class="col-sm-9">@(task.Description ?? "No description provided")</dd>
                            
                            <dt class="col-sm-3">Project:</dt>
                            <dd class="col-sm-9">
                                @if (task.Project != null)
                                {
                                    <a href="/projects/@task.Project.Id" class="text-decoration-none">@task.Project.Name</a>
                                }
                                else
                                {
                                    <span class="text-muted">Loading...</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Assigned To:</dt>
                            <dd class="col-sm-9">
                                @if (task.AssignedTo != null)
                                {
                                    <div>
                                        <strong>@task.AssignedTo.Username</strong>
                                        <br />
                                        <small class="text-muted">@task.AssignedTo.Email</small>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">Unassigned</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Status:</dt>
                            <dd class="col-sm-9">
                                <span class="badge bg-@GetStatusBadgeColor(task.Status)">@task.Status</span>
                            </dd>
                            
                            <dt class="col-sm-3">Priority:</dt>
                            <dd class="col-sm-9">
                                <span class="badge bg-@GetPriorityBadgeColor(task.Priority)">@task.Priority</span>
                            </dd>
                            
                            <dt class="col-sm-3">Start Date:</dt>
                            <dd class="col-sm-9">@(task.StartDate?.ToString("MMMM dd, yyyy") ?? "Not set")</dd>
                            
                            <dt class="col-sm-3">Due Date:</dt>
                            <dd class="col-sm-9">
                                @if (task.DueDate.HasValue)
                                {
                                    <span class="@(task.DueDate < DateTime.UtcNow && task.Status != TaskStatusConst.Done ? "text-danger" : "")">
                                        @task.DueDate.Value.ToString("MMMM dd, yyyy")
                                        @if (task.DueDate < DateTime.UtcNow && task.Status != TaskStatusConst.Done)
                                        {
                                            <small class="text-danger ms-1">(Overdue)</small>
                                        }
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">Not set</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Time Tracking:</dt>
                            <dd class="col-sm-9">
                                <div>
                                    <small class="text-muted">Estimated: </small>@(task.EstimatedHours?.ToString("0.0") ?? "N/A") hours
                                </div>
                                <div>
                                    <small class="text-muted">Actual: </small>@(task.ActualHours?.ToString("0.0") ?? "N/A") hours
                                </div>
                                @if (task.EstimatedHours.HasValue && task.ActualHours.HasValue)
                                {
                                    var efficiency = (task.EstimatedHours.Value / task.ActualHours.Value) * 100;
                                    <div>
                                        <small class="text-muted">Efficiency: </small>
                                        <span class="@(efficiency >= 90 ? "text-success" : efficiency >= 70 ? "text-warning" : "text-danger")">
                                            @efficiency.ToString("0")%
                                        </span>
                                    </div>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Created:</dt>
                            <dd class="col-sm-9">@task.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                            
                            <dt class="col-sm-3">Last Updated:</dt>
                            <dd class="col-sm-9">@task.UpdatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                            
                            @if (task.CompletedDate.HasValue)
                            {
                                <dt class="col-sm-3">Completed:</dt>
                                <dd class="col-sm-9">@task.CompletedDate.Value.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                            }
                        </dl>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-light">
                            <div class="card-header">
                                <h6 class="mb-0">Quick Actions</h6>
                            </div>
                            <div class="card-body">
                                @if (task.Status != TaskStatusConst.Done)
                                {
                                    <div class="d-grid gap-2 mb-3">
                                        @if (task.Status == TaskStatusConst.ToDo)
                                        {
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => QuickStatusChange(TaskStatusConst.InProgress)" disabled="@isProcessing">
                                                <i class="bi bi-play-circle"></i> Start Task
                                            </button>
                                        }
                                        @if (task.Status == TaskStatusConst.InProgress)
                                        {
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => QuickStatusChange(TaskStatusConst.InReview)" disabled="@isProcessing">
                                                <i class="bi bi-eye"></i> Mark for Review
                                            </button>
                                        }
                                        @if (task.Status == TaskStatusConst.InProgress || task.Status == TaskStatusConst.InReview)
                                        {
                                            <button class="btn btn-sm btn-outline-success" @onclick="() => QuickStatusChange(TaskStatusConst.Done)" disabled="@isProcessing">
                                                <i class="bi bi-check-circle"></i> Mark Complete
                                            </button>
                                        }
                                    </div>
                                }
                                
                                @if (CanEditTask())
                                {
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleEditMode">
                                            <i class="bi bi-pencil"></i> Edit Task
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="DeleteTask" disabled="@isProcessing">
                                            <i class="bi bi-trash"></i> Delete Task
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>

                        @if (GetTaskDuration() > 0)
                        {
                            <div class="card bg-info bg-opacity-10 mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Task Timeline</h6>
                                </div>
                                <div class="card-body">
                                    <div class="text-center">
                                        <div class="h4 mb-1">@GetTaskDuration()</div>
                                        <div class="small text-muted">Days Duration</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    @if (!IsEditMode)
    {
        <!-- Task Comments Section (Placeholder) -->
        <div class="card mt-4" style="width: 100%; max-width: 100%; overflow: hidden;">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5>Comments</h5>
                    <button class="btn btn-sm btn-outline-primary" disabled>
                        <i class="bi bi-plus-circle"></i> Add Comment
                    </button>
                </div>
            </div>
            <div class="card-body">
                <p class="text-muted">Comment functionality will be implemented in the next phase.</p>
            </div>
        </div>
    }
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading task...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            Task not found or you don't have permission to view it.
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private TaskDto? task;
    private PagedResult<ProjectMemberDto>? projectMembers;
    private UpdateTaskDto updateModel = new();
    private bool isLoading = true;
    private bool isLoadingMembers = false;
    private bool isProcessing = false;
    private bool IsEditMode => Navigation.Uri.Contains("/edit");
    private string errorMessage = string.Empty;
    private UserDto? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadTask();
        if (!IsEditMode && task != null)
        {
            await LoadProjectMembers();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentUser();
        await LoadTask();
        if (!IsEditMode && task != null)
        {
            await LoadProjectMembers();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    currentUser = await UserService.GetUserByIdAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading current user: {ex.Message}");
        }
    }

    private async Task LoadTask()
    {
        isLoading = true;
        try
        {
            task = await TaskService.GetTaskAsync(Id);
            if (task != null)
            {
                updateModel.Title = task.Title;
                updateModel.Description = task.Description;
                updateModel.Status = task.Status;
                updateModel.Priority = task.Priority;
                updateModel.StartDate = task.StartDate;
                updateModel.DueDate = task.DueDate;
                updateModel.EstimatedHours = task.EstimatedHours;
                updateModel.ActualHours = task.ActualHours;
                updateModel.AssignedToUserId = task.AssignedToUserId;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading task: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadProjectMembers()
    {
        if (task?.ProjectId == null) return;
        
        isLoadingMembers = true;
        try
        {
            projectMembers = await ProjectService.GetProjectMembersAsync(task.ProjectId, 1, 100);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project members: {ex.Message}");
        }
        finally
        {
            isLoadingMembers = false;
        }
    }

    private async Task HandleUpdate()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Validate dates
            if (updateModel.StartDate.HasValue && updateModel.DueDate.HasValue && updateModel.DueDate < updateModel.StartDate)
            {
                errorMessage = "Due date must be after start date.";
                return;
            }

            var result = await TaskService.UpdateTaskAsync(Id, updateModel);
            
            if (result != null)
            {
                task = result;
                Navigation.NavigateTo($"/tasks/{Id}");
            }
            else
            {
                errorMessage = "Failed to update task. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the task. Please try again.";
            Console.WriteLine($"Update task error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task QuickStatusChange(string newStatus)
    {
        if (isProcessing) return;
        
        isProcessing = true;
        try
        {
            var success = await TaskService.UpdateTaskStatusAsync(Id, newStatus);
            if (success)
            {
                await LoadTask(); // Refresh the task data
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update task status. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task status: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while updating the task status.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteTask()
    {
        if (isProcessing) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task? This action cannot be undone.");
        if (!confirmed) return;
        
        isProcessing = true;
        try
        {
            var success = await TaskService.DeleteTaskAsync(Id);
            if (success)
            {
                Navigation.NavigateTo("/tasks");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete task. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while deleting the task.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private bool CanEditTask()
    {
        if (currentUser == null || task == null) return false;
        
        // System admin can edit any task
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Task assignee can edit their own task
        if (task.AssignedToUserId == currentUser.Id) return true;
        
        // Project managers can edit any task in their project
        var userMembership = projectMembers?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.ProjectManager;
    }

    private string GetStatusBadgeColor(string status)
    {
        return status switch
        {
            TaskStatusConst.ToDo => "secondary",
            TaskStatusConst.InProgress => "warning",
            TaskStatusConst.InReview => "info",
            TaskStatusConst.Done => "success",
            _ => "secondary"
        };
    }

    private string GetPriorityBadgeColor(string priority)
    {
        return priority switch
        {
            Priority.Critical => "danger",
            Priority.High => "warning",
            Priority.Medium => "primary",
            Priority.Low => "info",
            _ => "secondary"
        };
    }

    private int GetTaskDuration()
    {
        if (task?.StartDate.HasValue == true && task?.DueDate.HasValue == true)
        {
            return (int)(task.DueDate.Value - task.StartDate.Value).TotalDays;
        }
        return 0;
    }

    private void ToggleEditMode()
    {
        Navigation.NavigateTo($"/tasks/{Id}/edit");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/tasks/{Id}");
    }

    private void GoBack()
    {
        if (task?.Project != null)
        {
            Navigation.NavigateTo($"/projects/{task.Project.Id}");
        }
        else
        {
            Navigation.NavigateTo("/tasks");
        }
    }
}