@page "/users"
@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@using ProjectManagementSystem.Shared.Common.Constants
@rendermode InteractiveServer
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>User Management - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>User Management</h2>
                    <p class="text-muted mb-0">Click on username or email to view details and manage users</p>
                </div>
                <button class="btn btn-primary" @onclick="NavigateToCreate">
                    <i class="bi bi-person-plus"></i> Create User
                </button>
            </div>

            <!-- Check if user is authenticated and SystemAdmin -->
            @if (!isAuthenticated)
            {
                <div class="alert alert-warning">
                    <i class="bi bi-info-circle"></i>
                    <strong>Please Login:</strong> You need to be logged in to access this page.
                </div>
            }
            else if (!isSystemAdmin)
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Access Denied:</strong> You don't have permission to access user management.
                </div>
            }
            else
            {

            <!-- Search and Filter Controls -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="searchTerm" class="form-label">Search Users</label>
                            <input id="searchTerm" type="text" class="form-control" @bind="searchRequest.SearchTerm" 
                                   @onkeypress="@((e) => OnKeyPress(e))" placeholder="Search by name, username, or email..." />
                        </div>
                        <div class="col-md-3">
                            <label for="roleFilter" class="form-label">Role</label>
                            <select id="roleFilter" class="form-select" @bind="searchRequest.Role">
                                <option value="">All Roles</option>
                                @if (availableRoles != null)
                                {
                                    @foreach (var role in availableRoles)
                                    {
                                        <option value="@role">@role</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select id="statusFilter" class="form-select" @bind="searchRequest.IsActive">
                                <option value="">All Status</option>
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-primary me-2" @onclick="SearchUsers">
                                <i class="bi bi-search"></i> Search
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="bi bi-x-circle"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Loading State -->
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            <!-- Users Table -->
            else if (users?.Items?.Any() == true)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="card-title mb-0">Users (@users.TotalCount total)</h5>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none" @onclick="() => SortBy(nameof(UserListDto.Username))">
                                                Username
                                                @if (searchRequest.SortBy == nameof(UserListDto.Username))
                                                {
                                                    <i class="bi bi-arrow-@(searchRequest.SortDirection == "desc" ? "down" : "up")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none" @onclick="() => SortBy(nameof(UserListDto.Email))">
                                                Email
                                                @if (searchRequest.SortBy == nameof(UserListDto.Email))
                                                {
                                                    <i class="bi bi-arrow-@(searchRequest.SortDirection == "desc" ? "down" : "up")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>Full Name</th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none" @onclick="() => SortBy(nameof(UserListDto.Role))">
                                                Role
                                                @if (searchRequest.SortBy == nameof(UserListDto.Role))
                                                {
                                                    <i class="bi bi-arrow-@(searchRequest.SortDirection == "desc" ? "down" : "up")"></i>
                                                }
                                            </button>
                                        </th>
                                        <th>Status</th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none" @onclick="() => SortBy(nameof(UserListDto.LastLoginAt))">
                                                Last Login
                                                @if (searchRequest.SortBy == nameof(UserListDto.LastLoginAt))
                                                {
                                                    <i class="bi bi-arrow-@(searchRequest.SortDirection == "desc" ? "down" : "up")"></i>
                                                }
                                            </button>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users.Items)
                                    {
                                        <tr>
                                            <td>
                                                <a href="javascript:void(0)" 
                                                   @onclick="() => ViewUser(user.Id)"
                                                   @onclick:preventDefault="true"
                                                   class="text-decoration-none fw-bold text-primary"
                                                   style="cursor: pointer;">
                                                    @user.Username
                                                </a>
                                            </td>
                                            <td>
                                                <a href="javascript:void(0)" 
                                                   @onclick="() => ViewUser(user.Id)"
                                                   @onclick:preventDefault="true"
                                                   class="text-decoration-none text-primary"
                                                   style="cursor: pointer;">
                                                    @user.Email
                                                </a>
                                            </td>
                                            <td>@user.FullName</td>
                                            <td>
                                                <span class="badge bg-@GetRoleBadgeColor(user.Role)">@user.Role</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(user.IsActive ? "success" : "secondary")">
                                                    @(user.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                            <td>
                                                @if (user.LastLoginAt.HasValue)
                                                {
                                                    @user.LastLoginAt.Value.ToString("MMM dd, yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (users.TotalCount > users.PageSize)
                        {
                            <nav aria-label="Users pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(users.PageNumber <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadPage(users.PageNumber - 1)" disabled="@(users.PageNumber <= 1)">
                                            Previous
                                        </button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, users.PageNumber - 2); i <= Math.Min(users.TotalPages, users.PageNumber + 2); i++)
                                    {
                                        <li class="page-item @(i == users.PageNumber ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(users.PageNumber >= users.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadPage(users.PageNumber + 1)" disabled="@(users.PageNumber >= users.TotalPages)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                </div>
            }
            <!-- Empty State -->
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-people" style="font-size: 3rem; color: #6c757d;"></i>
                        <h5 class="mt-3">No users found</h5>
                        <p class="text-muted">
                            @if (!string.IsNullOrWhiteSpace(searchRequest.SearchTerm) || !string.IsNullOrWhiteSpace(searchRequest.Role) || searchRequest.IsActive.HasValue)
                            {
                                <span>No users match your search criteria. Try adjusting your filters.</span>
                            }
                            else
                            {
                                <span>Get started by creating your first user.</span>
                            }
                        </p>
                        @if (string.IsNullOrWhiteSpace(searchRequest.SearchTerm) && string.IsNullOrWhiteSpace(searchRequest.Role) && !searchRequest.IsActive.HasValue)
                        {
                            <button class="btn btn-primary" @onclick="NavigateToCreate">
                                <i class="bi bi-person-plus"></i> Create User
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="bi bi-x-circle"></i> Clear Filters
                            </button>
                        }
                    </div>
                </div>
            }
            } <!-- End of authentication/authorization check -->
        </div>
    </div>
</div>

@code {
    private PagedResult<UserListDto>? users;
    private List<string>? availableRoles;
    private UserSearchRequest searchRequest = new();
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool isSystemAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserPermissions();
        if (isAuthenticated && isSystemAdmin)
        {
            await LoadAvailableRoles();
            await LoadUsers();
        }
        else
        {
            isLoading = false; // Stop loading if not authorized
        }
    }

    private async Task CheckUserPermissions()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            // Log all claims for debugging
            Console.WriteLine("=== USER CLAIMS ===");
            foreach (var claim in authState.User.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Value: {claim.Value}");
            }
            
            // Check multiple possible claim types for role
            var userRole = authState.User.FindFirst("Role")?.Value 
                        ?? authState.User.FindFirst("role")?.Value
                        ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
                        
            Console.WriteLine($"Found role: {userRole}");
            Console.WriteLine($"Expected SystemAdmin role: {Roles.SystemAdmin}");
            isSystemAdmin = userRole == Roles.SystemAdmin;
            Console.WriteLine($"Is SystemAdmin: {isSystemAdmin}, Comparison: '{userRole}' == '{Roles.SystemAdmin}' = {userRole == Roles.SystemAdmin}");
        }
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            availableRoles = await UserService.GetAvailableRolesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading roles: {ex.Message}");
        }
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            users = await UserService.GetUsersAsync(searchRequest);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        searchRequest.PageNumber = pageNumber;
        await LoadUsers();
    }

    private async Task SearchUsers()
    {
        searchRequest.PageNumber = 1; // Reset to first page when searching
        await LoadUsers();
    }

    private async Task ClearSearch()
    {
        searchRequest = new UserSearchRequest();
        await LoadUsers();
    }

    private async Task SortBy(string sortBy)
    {
        if (searchRequest.SortBy == sortBy)
        {
            searchRequest.SortDirection = searchRequest.SortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            searchRequest.SortBy = sortBy;
            searchRequest.SortDirection = "asc";
        }
        searchRequest.PageNumber = 1; // Reset to first page when sorting
        await LoadUsers();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchUsers();
        }
    }

    private string GetRoleBadgeColor(string role)
    {
        return role switch
        {
            Roles.SystemAdmin => "danger",
            Roles.User => "success",
            _ => "secondary" // Only global roles should appear in user management
        };
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/users/create", forceLoad: true);
    }

    private void ViewUser(int id)
    {
        Navigation.NavigateTo($"/users/{id}", forceLoad: true);
    }


}