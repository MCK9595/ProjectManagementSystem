@page "/organizations"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models

@attribute [Authorize]
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop

<PageTitle>Organizations - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Organizations</h2>
                <button class="btn btn-primary" @onclick="NavigateToCreate">
                    <i class="bi bi-plus-circle"></i> Create Organization
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (hasError)
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-exclamation-triangle" style="font-size: 3rem; color: #dc3545;"></i>
                        <h5 class="mt-3 text-danger">Error Loading Organizations</h5>
                        <p class="text-muted">@errorMessage</p>
                        <button class="btn btn-primary" @onclick="() => LoadOrganizations()">
                            <i class="bi bi-arrow-clockwise"></i> Try Again
                        </button>
                    </div>
                </div>
            }
            else if (organizations?.Items?.Any() == true)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Created Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var org in organizations.Items)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@org.Name</strong>
                                            </td>
                                            <td>@org.Description</td>
                                            <td>@org.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="() => ViewOrganization(org.Id)">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1" 
                                                        @onclick="() => EditOrganization(org.Id)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteOrganization(org.Id)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (organizations.TotalCount > organizations.PageSize)
                        {
                            <nav aria-label="Organizations pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(organizations.PageNumber <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadPage(organizations.PageNumber - 1)" disabled="@(organizations.PageNumber <= 1)">
                                            Previous
                                        </button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, organizations.PageNumber - 2); i <= Math.Min(organizations.TotalPages, organizations.PageNumber + 2); i++)
                                    {
                                        <li class="page-item @(i == organizations.PageNumber ? "active" : "")">
                                            <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(organizations.PageNumber >= organizations.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => LoadPage(organizations.PageNumber + 1)" disabled="@(organizations.PageNumber >= organizations.TotalPages)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-building" style="font-size: 3rem; color: #6c757d;"></i>
                        <h5 class="mt-3">No organizations found</h5>
                        <p class="text-muted">Get started by creating your first organization.</p>
                        <button class="btn btn-primary" @onclick="NavigateToCreate">
                            <i class="bi bi-plus-circle"></i> Create Organization
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<OrganizationDto>? organizations;
    private bool isLoading = true;
    private string? errorMessage;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganizations();
    }

    private async Task LoadOrganizations(int pageNumber = 1)
    {
        isLoading = true;
        hasError = false;
        errorMessage = null;
        
        try
        {
            organizations = await OrganizationService.GetOrganizationsAsync(pageNumber, 10);
            
            if (organizations == null)
            {
                hasError = true;
                errorMessage = "Failed to load organizations. Please check your connection and try again.";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"An error occurred while loading organizations: {ex.Message}";
            Console.WriteLine($"Error loading organizations: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        await LoadOrganizations(pageNumber);
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/organizations/create");
    }

    private void ViewOrganization(Guid id)
    {
        Navigation.NavigateTo($"/organizations/{id}");
    }

    private void EditOrganization(Guid id)
    {
        Navigation.NavigateTo($"/organizations/{id}/edit");
    }

    private async Task DeleteOrganization(Guid id)
    {
        if (await JSInterop.InvokeAsync<bool>("confirm", "Are you sure you want to delete this organization?"))
        {
            var success = await OrganizationService.DeleteOrganizationAsync(id);
            if (success)
            {
                await LoadOrganizations(organizations?.PageNumber ?? 1);
            }
        }
    }
}