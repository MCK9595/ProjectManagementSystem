@page "/organizations/{id:int}"
@page "/organizations/{id:int}/edit"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@rendermode InteractiveServer
@attribute [Authorize]
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation

<PageTitle>@(IsEditMode ? "Edit" : "View") Organization - Project Management System</PageTitle>

@if (organization != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4>@(IsEditMode ? "Edit" : "View") Organization</h4>
                            <div>
                                @if (!IsEditMode)
                                {
                                    <button class="btn btn-outline-primary me-2" @onclick="ToggleEditMode">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                }
                                <button class="btn btn-outline-secondary" @onclick="GoBack">
                                    <i class="bi bi-arrow-left"></i> Back
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (IsEditMode)
                        {
                            <EditForm Model="@updateModel" OnValidSubmit="@HandleUpdate">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger">
                                        @errorMessage
                                    </div>
                                }

                                <div class="mb-3">
                                    <label for="name" class="form-label">Organization Name <span class="text-danger">*</span></label>
                                    <InputText id="name" @bind-Value="updateModel.Name" class="form-control" />
                                    <ValidationMessage For="@(() => updateModel.Name)" />
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <InputTextArea id="description" @bind-Value="updateModel.Description" class="form-control" rows="4" />
                                    <ValidationMessage For="@(() => updateModel.Description)" />
                                </div>

                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="CancelEdit">
                                        Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                        @if (isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        Save Changes
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>Organization Details</h5>
                                    <dl class="row">
                                        <dt class="col-sm-4">Name:</dt>
                                        <dd class="col-sm-8">@organization.Name</dd>
                                        
                                        <dt class="col-sm-4">Description:</dt>
                                        <dd class="col-sm-8">@(organization.Description ?? "No description provided")</dd>
                                        
                                        <dt class="col-sm-4">Created:</dt>
                                        <dd class="col-sm-8">@organization.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                                        
                                        <dt class="col-sm-4">Status:</dt>
                                        <dd class="col-sm-8">@(organization.IsActive ? "Active" : "Inactive")</dd>
                                    </dl>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                @if (!IsEditMode)
                {
                    <!-- Organization Members Section -->
                    <div class="card mt-4">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5>Organization Members</h5>
                                <button class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-person-plus"></i> Add Member
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (isLoadingMembers)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading members...</span>
                                    </div>
                                </div>
                            }
                            else if (members?.Items?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>User</th>
                                                <th>Role</th>
                                                <th>Joined Date</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var member in members.Items)
                                            {
                                                <tr>
                                                    <td>
                                                        <div>
                                                            <strong>@member.User?.Username</strong>
                                                            <br />
                                                            <small class="text-muted">@member.User?.Email</small>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-primary">@member.Role</span>
                                                    </td>
                                                    <td>@member.JoinedAt.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <button class="btn btn-sm btn-outline-danger">
                                                            <i class="bi bi-person-dash"></i> Remove
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No members found in this organization.</p>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading organization...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            Organization not found or you don't have permission to view it.
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private OrganizationDto? organization;
    private PagedResult<OrganizationMemberDto>? members;
    private UpdateOrganizationDto updateModel = new();
    private bool isLoading = true;
    private bool isLoadingMembers = false;
    private bool IsEditMode => Navigation.Uri.Contains("/edit");
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganization();
        if (!IsEditMode)
        {
            await LoadMembers();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadOrganization();
        if (!IsEditMode)
        {
            await LoadMembers();
        }
    }

    private async Task LoadOrganization()
    {
        isLoading = true;
        try
        {
            organization = await OrganizationService.GetOrganizationAsync(Id);
            if (organization != null)
            {
                updateModel.Name = organization.Name;
                updateModel.Description = organization.Description;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading organization: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMembers()
    {
        isLoadingMembers = true;
        try
        {
            members = await OrganizationService.GetOrganizationMembersAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading members: {ex.Message}");
        }
        finally
        {
            isLoadingMembers = false;
        }
    }

    private async Task HandleUpdate()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await OrganizationService.UpdateOrganizationAsync(Id, updateModel);
            
            if (result != null)
            {
                organization = result;
                Navigation.NavigateTo($"/organizations/{Id}");
            }
            else
            {
                errorMessage = "Failed to update organization. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the organization. Please try again.";
            Console.WriteLine($"Update organization error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEditMode()
    {
        Navigation.NavigateTo($"/organizations/{Id}/edit");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/organizations/{Id}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/organizations");
    }
}