@page "/organizations/{id:guid}"
@page "/organizations/{id:guid}/edit"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@using ProjectManagementSystem.Shared.Common.Constants

@attribute [Authorize]
@inject IOrganizationService OrganizationService
@inject IProjectService ProjectService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@(IsEditMode ? "Edit" : "View") Organization - Project Management System</PageTitle>

@if (organization != null)
{
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4" style="max-width: 100%; overflow: hidden;">
        <div>
            <h2 class="mb-2" style="font-weight: var(--font-weight-semibold); color: var(--color-gray-900);">@(IsEditMode ? "Edit" : "View") Organization</h2>
            <p class="text-muted mb-0" style="font-size: var(--font-size-sm);">@organization.Name</p>
        </div>
        <div>
            @if (!IsEditMode && CanEditOrganization())
            {
                <button class="btn btn-outline-primary me-2" @onclick="ToggleEditMode">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            }
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="bi bi-arrow-left"></i> Back
            </button>
        </div>
    </div>

    <!-- Main Content Card -->
    <div class="card mb-4" style="width: 100%; max-width: 100%; overflow: hidden;">
        <div class="card-body">
                        @if (IsEditMode)
                        {
                            <EditForm Model="@updateModel" OnValidSubmit="@HandleUpdate">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger">
                                        @errorMessage
                                    </div>
                                }

                                <div class="mb-3">
                                    <label for="name" class="form-label">Organization Name <span class="text-danger">*</span></label>
                                    <InputText id="name" @bind-Value="updateModel.Name" class="form-control" />
                                    <ValidationMessage For="@(() => updateModel.Name)" />
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <InputTextArea id="description" @bind-Value="updateModel.Description" class="form-control" rows="4" />
                                    <ValidationMessage For="@(() => updateModel.Description)" />
                                </div>

                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="CancelEdit">
                                        Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                        @if (isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        Save Changes
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <h5>Organization Details</h5>
                                    <dl class="row">
                                        <dt class="col-sm-4">Name:</dt>
                                        <dd class="col-sm-8">@organization.Name</dd>
                                        
                                        <dt class="col-sm-4">Description:</dt>
                                        <dd class="col-sm-8">@(organization.Description ?? "No description provided")</dd>
                                        
                                        <dt class="col-sm-4">Created:</dt>
                                        <dd class="col-sm-8">@organization.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                                        
                                        <dt class="col-sm-4">Status:</dt>
                                        <dd class="col-sm-8">@(organization.IsActive ? "Active" : "Inactive")</dd>
                                    </dl>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                @if (!IsEditMode)
                {
                    <!-- Organization Members Section -->
                    <div class="card mt-4" style="width: 100%; max-width: 100%; overflow: hidden;">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-1">Organization Members</h5>
                                    @if (GetOrphanedMembersCount() > 0)
                                    {
                                        <small class="text-warning">
                                            <i class="bi bi-exclamation-triangle"></i>
                                            @GetOrphanedMembersCount() 個の孤立したメンバーシップが見つかりました
                                        </small>
                                    }
                                </div>
                                <div>
                                    @if (CanManageMembers() && GetOrphanedMembersCount() > 0)
                                    {
                                        <button class="btn btn-sm btn-outline-warning me-2" @onclick="CleanupAllOrphanedMembers" disabled="@isProcessing" title="すべての孤立したメンバーシップを削除">
                                            <i class="bi bi-trash3"></i> Cleanup All (@GetOrphanedMembersCount())
                                        </button>
                                    }
                                    @if (CanManageMembers())
                                    {
                                        <button class="btn btn-sm btn-outline-primary" @onclick="OpenFindUserModal">
                                            <i class="bi bi-person-plus"></i> Add Member
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (isLoadingMembers)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading members...</span>
                                    </div>
                                </div>
                            }
                            else if (members?.Items?.Any() == true)
                            {
                                <div class="table-responsive" style="width: 100%; overflow-x: auto;">
                                    <table class="table table-hover table-striped table-sm" style="min-width: 600px; table-layout: fixed; width: 100%;">
                                        <thead>
                                            <tr>
                                                <th style="width: 35%;">User</th>
                                                <th style="width: 20%;">Role</th>
                                                <th style="width: 20%;">Joined Date</th>
                                                <th style="width: 25%;">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var member in members.Items)
                                            {
                                                <tr>
                                                    <td class="text-truncate">
                                                        <div>
                                                            @if (member.User != null)
                                                            {
                                                                <strong class="d-block text-truncate" title="@member.User.Username">@member.User.Username</strong>
                                                                <small class="text-muted text-truncate d-block" title="@member.User.Email">@member.User.Email</small>
                                                            }
                                                            else
                                                            {
                                                                <strong class="d-block text-truncate text-danger" title="Deleted User">
                                                                    <i class="bi bi-exclamation-triangle me-1"></i>削除されたユーザー
                                                                </strong>
                                                                <small class="text-muted text-truncate d-block">User ID: @member.UserId</small>
                                                            }
                                                        </div>
                                                    </td>
                                                    <td>
                                                        @if (member.User != null && CanManageMembers() && (member.Role != Roles.OrganizationOwner || IsOwner()))
                                                        {
                                                            <select class="form-select form-select-sm" @onchange="(e) => UpdateMemberRole(member.UserId, e.Value?.ToString() ?? member.Role)">
                                                                <option value="@Roles.OrganizationMember" selected="@(member.Role == Roles.OrganizationMember)">Member</option>
                                                                <option value="@Roles.OrganizationAdmin" selected="@(member.Role == Roles.OrganizationAdmin)">Admin</option>
                                                                @if (IsOwner())
                                                                {
                                                                    <option value="@Roles.OrganizationOwner" selected="@(member.Role == Roles.OrganizationOwner)" style="color: #dc3545; font-weight: bold;">Owner</option>
                                                                }
                                                            </select>
                                                        }
                                                        else if (member.User == null)
                                                        {
                                                            <span class="badge bg-secondary text-decoration-line-through">@GetRoleDisplayName(member.Role)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-@GetRoleBadgeColor(member.Role)">@GetRoleDisplayName(member.Role)</span>
                                                        }
                                                    </td>
                                                    <td class="text-truncate">@member.JoinedAt.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        @if (member.User == null && CanManageMembers())
                                                        {
                                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => CleanupOrphanedMember(member.Id)" disabled="@isProcessing" title="孤立したメンバーシップデータを削除">
                                                                <i class="bi bi-trash3"></i> Cleanup
                                                            </button>
                                                        }
                                                        else if (CanManageMembers() && member.User != null && (member.Role != Roles.OrganizationOwner || IsOwner()))
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveMember(member.UserId)" disabled="@isProcessing">
                                                                <i class="bi bi-person-dash"></i> Remove
                                                            </button>
                                                        }
                                                        else if (member.User == null)
                                                        {
                                                            <span class="text-muted">削除済み</span>
                                                        }
                                                        else if (member.Role == Roles.OrganizationOwner && !IsOwner())
                                                        {
                                                            <span class="text-muted">Owner</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">@GetRoleDisplayName(member.Role)</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No members found in this organization.</p>
                            }
                        </div>
                    </div>

                    <!-- Transfer Ownership Section (Only visible to Owner) -->
                    @if (IsOwner())
                    {
                        <div class="card mt-4 border-warning" style="width: 100%; max-width: 100%; overflow: hidden;">
                            <div class="card-header bg-warning-subtle">
                                <h5 class="text-warning-emphasis mb-0">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Transfer Ownership
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning" role="alert">
                                    <strong>Warning:</strong> Transferring ownership is a permanent action that cannot be undone without the new owner's permission.
                                </div>
                                
                                <p class="mb-3">
                                    As the current owner, you can transfer full ownership of this organization to another member. 
                                    The new owner will have complete control over the organization, and you will become a regular Admin.
                                </p>

                                @if (showTransferOwnershipSection)
                                {
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="newOwnerSelect" class="form-label">Select New Owner <span class="text-danger">*</span></label>
                                                <select id="newOwnerSelect" @bind="selectedNewOwnerId" class="form-select">
                                                    <option value="">-- Select Member --</option>
                                                    @if (members?.Items != null)
                                                    {
                                                        @foreach (var member in members.Items.Where(m => m.User != null && m.UserId != currentUser?.Id))
                                                        {
                                                            <option value="@member.UserId">@member.User.Username (@member.User.Email)</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Current Owner</label>
                                                <div class="form-control bg-light">
                                                    <strong>@currentUser?.Username</strong> (@currentUser?.Email)
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-outline-secondary" @onclick="CancelTransferOwnership">
                                            Cancel
                                        </button>
                                        <button type="button" class="btn btn-danger" @onclick="ConfirmTransferOwnership" disabled="@(isProcessing || selectedNewOwnerId == 0)">
                                            @if (isProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            }
                                            Transfer Ownership
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-warning" @onclick="ShowTransferOwnershipSection">
                                        <i class="bi bi-arrow-left-right me-2"></i>Transfer Ownership
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <!-- Organization Projects Section -->
                    <div class="card mt-4" style="width: 100%; max-width: 100%; overflow: hidden;">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5>Projects</h5>
                                @if (CanCreateProject())
                                {
                                    <button class="btn btn-sm btn-outline-primary" @onclick="CreateProject">
                                        <i class="bi bi-plus-circle"></i> Create Project
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            @if (isLoadingProjects)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading projects...</span>
                                    </div>
                                </div>
                            }
                            else if (projects?.Items?.Any() == true)
                            {
                                <div class="row">
                                    @foreach (var project in projects.Items)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="card h-100 shadow-sm">
                                                <div class="card-body">
                                                    <h6 class="card-title text-truncate" title="@project.Name">@project.Name</h6>
                                                    <p class="card-text text-muted small text-truncate" title="@project.Description">@(project.Description ?? "No description")</p>
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <small class="text-muted">@project.CreatedAt.ToString("MMM dd, yyyy")</small>
                                                        <span class="badge bg-@GetProjectStatusBadgeColor(project.Status)">
                                                            @project.Status
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="card-footer bg-transparent border-0 pt-0">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewProject(project.Id)">
                                                        <i class="bi bi-eye"></i> View Project
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No projects found in this organization.</p>
                            }
                        </div>
                    </div>
                }
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading organization...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            Organization not found or you don't have permission to view it.
        </div>
    </div>
}

<!-- Stage 1: Find User Modal -->
@if (showFindUserModal)
{
    <div class="modal fade show d-block" tabindex="-1" aria-labelledby="findUserModalLabel" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="findUserModalLabel">Add Member - Step 1</h5>
                    <button type="button" class="btn-close" @onclick="CloseFindUserModal" aria-label="Close"></button>
                </div>
                <EditForm Model="@findUserModel" OnValidSubmit="@HandleFindUser">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(findUserErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @findUserErrorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="findUserEmail" class="form-label">Email <span class="text-danger">*</span></label>
                            <InputText id="findUserEmail" @bind-Value="findUserModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => findUserModel.Email)" />
                            <div class="form-text">Enter the email address of the user you want to add to this organization.</div>
                        </div>

                        <div class="mb-3">
                            <label for="findUserRole" class="form-label">Organization Role <span class="text-danger">*</span></label>
                            <InputSelect id="findUserRole" @bind-Value="findUserModel.OrganizationRole" class="form-select">
                                <option value="">-- Select Role --</option>
                                @if (IsOwner())
                                {
                                    <option value="@Roles.OrganizationOwner" style="color: #dc3545; font-weight: bold;">Owner</option>
                                }
                                <option value="@Roles.OrganizationAdmin">Admin</option>
                                <option value="@Roles.OrganizationMember">Member</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => findUserModel.OrganizationRole)" />
                            @if (IsOwner())
                            {
                                <div class="form-text text-warning">
                                    <i class="bi bi-exclamation-triangle-fill"></i>
                                    <strong>Warning:</strong> Promoting someone to Owner gives them full control over the organization.
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseFindUserModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isAddingMember">
                            @if (isAddingMember)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Next
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Stage 2: Create User Modal -->
@if (showCreateUserModal)
{
    <div class="modal fade show d-block" tabindex="-1" aria-labelledby="createUserModalLabel" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createUserModalLabel">Add Member - Step 2: Create User</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateUserModal" aria-label="Close"></button>
                </div>
                <EditForm Model="@createUserModel" OnValidSubmit="@HandleCreateUser">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(createUserErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @createUserErrorMessage
                            </div>
                        }

                        <div class="alert alert-info">
                            <strong>Creating new user for:</strong> @createUserModel.Email with role <strong>@GetRoleDisplayName(createUserModel.OrganizationRole)</strong>
                        </div>

                        <div class="mb-3">
                            <label for="createUserFirstName" class="form-label">First Name <span class="text-danger">*</span></label>
                            <InputText id="createUserFirstName" @bind-Value="createUserModel.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => createUserModel.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label for="createUserLastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                            <InputText id="createUserLastName" @bind-Value="createUserModel.LastName" class="form-control" />
                            <ValidationMessage For="@(() => createUserModel.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label for="createUserPassword" class="form-label">Password <span class="text-danger">*</span></label>
                            <InputText id="createUserPassword" @bind-Value="createUserModel.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => createUserModel.Password)" />
                            <div class="form-text">Password must be at least 8 characters long.</div>
                        </div>

                        <div class="mb-3">
                            <label for="createUserConfirmPassword" class="form-label">Confirm Password <span class="text-danger">*</span></label>
                            <InputText id="createUserConfirmPassword" @bind-Value="createUserModel.ConfirmPassword" class="form-control" type="password" />
                            <ValidationMessage For="@(() => createUserModel.ConfirmPassword)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="GoBackToFindUser">Back</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="CloseCreateUserModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isAddingMember">
                            @if (isAddingMember)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Create User & Add to Organization
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private OrganizationDto? organization;
    private PagedResult<OrganizationMemberDto>? members;
    private PagedResult<ProjectDto>? projects;
    private UpdateOrganizationDto updateModel = new();
    private FindUserByEmailDto findUserModel = new()
    {
        Email = string.Empty,
        OrganizationRole = string.Empty
    };
    private CreateUserAndAddMemberDto createUserModel = new()
    {
        Email = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        Password = string.Empty,
        ConfirmPassword = string.Empty,
        OrganizationRole = string.Empty
    };
    private bool isLoading = true;
    private bool isLoadingMembers = false;
    private bool isLoadingProjects = false;
    private bool isProcessing = false;
    private bool isAddingMember = false;
    private bool showFindUserModal = false;
    private bool showCreateUserModal = false;
    private bool IsEditMode => Navigation.Uri.Contains("/edit");
    private string errorMessage = string.Empty;
    private string findUserErrorMessage = string.Empty;
    private string createUserErrorMessage = string.Empty;
    private UserDto? currentUser;
    private bool showTransferOwnershipSection = false;
    private int selectedNewOwnerId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadOrganization();
        if (!IsEditMode)
        {
            await LoadMembers();
            await LoadProjects();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentUser();
        await LoadOrganization();
        if (!IsEditMode)
        {
            await LoadMembers();
            await LoadProjects();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    currentUser = await UserService.GetUserByIdAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading current user: {ex.Message}");
        }
    }

    private async Task LoadOrganization()
    {
        isLoading = true;
        try
        {
            organization = await OrganizationService.GetOrganizationAsync(Id);
            if (organization != null)
            {
                updateModel.Name = organization.Name;
                updateModel.Description = organization.Description;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading organization: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMembers()
    {
        isLoadingMembers = true;
        try
        {
            members = await OrganizationService.GetOrganizationMembersAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading members: {ex.Message}");
        }
        finally
        {
            isLoadingMembers = false;
        }
    }

    private async Task LoadProjects()
    {
        isLoadingProjects = true;
        try
        {
            projects = await ProjectService.GetProjectsByOrganizationAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            isLoadingProjects = false;
        }
    }

    private async Task HandleUpdate()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await OrganizationService.UpdateOrganizationAsync(Id, updateModel);
            
            if (result != null)
            {
                organization = result;
                Navigation.NavigateTo($"/organizations/{Id}");
            }
            else
            {
                errorMessage = "Failed to update organization. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the organization. Please try again.";
            Console.WriteLine($"Update organization error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanEditOrganization()
    {
        if (currentUser == null || organization == null) return false;
        
        // System admin can edit any organization
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Check if user is organization owner or admin
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.OrganizationOwner || 
               userMembership?.Role == Roles.OrganizationAdmin;
    }

    private bool CanManageMembers()
    {
        if (currentUser == null || organization == null) return false;
        
        // System admin can manage members in any organization
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Check if user is organization owner or admin
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.OrganizationOwner || 
               userMembership?.Role == Roles.OrganizationAdmin;
    }

    private bool IsOwner()
    {
        if (currentUser == null || organization == null) return false;
        
        // System admin can act as owner in any organization
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Check if user is organization owner
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.OrganizationOwner;
    }

    private bool CanCreateProject()
    {
        if (currentUser == null || organization == null) return false;
        
        // System admin can create projects in any organization
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Organization members and above can create projects
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership != null;
    }

    private async Task UpdateMemberRole(int userId, string newRole)
    {
        if (isProcessing) return;
        
        // Get current member information
        var currentMember = members?.Items?.FirstOrDefault(m => m.UserId == userId);
        if (currentMember == null) return;
        
        var currentRole = currentMember.Role;
        var memberName = currentMember.User?.Username ?? "Unknown User";
        
        // Check for ownership changes that require confirmation
        bool confirmed = true;
        
        // Case 1: Promoting to Owner
        if (newRole == Roles.OrganizationOwner && currentRole != Roles.OrganizationOwner)
        {
            confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"⚠️ PROMOTE TO OWNER ⚠️\n\n" +
                $"Are you sure you want to promote \"{memberName}\" to Owner?\n\n" +
                $"This will give them:\n" +
                $"• Full control over the organization\n" +
                $"• Ability to delete the organization\n" +
                $"• Ability to promote/demote other members\n" +
                $"• Cannot be removed by other members\n\n" +
                $"This action cannot be undone without their permission.");
        }
        // Case 2: Demoting from Owner
        else if (currentRole == Roles.OrganizationOwner && newRole != Roles.OrganizationOwner)
        {
            confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"⚠️ DEMOTE FROM OWNER ⚠️\n\n" +
                $"Are you sure you want to demote \"{memberName}\" from Owner to {GetRoleDisplayName(newRole)}?\n\n" +
                $"This will remove their:\n" +
                $"• Full control over the organization\n" +
                $"• Ability to delete the organization\n" +
                $"• Ability to promote others to Owner\n\n" +
                $"They will become a regular {GetRoleDisplayName(newRole)} member.");
        }
        
        if (!confirmed) return;
        
        isProcessing = true;
        try
        {
            var success = await OrganizationService.UpdateMemberRoleAsync(Id, userId, newRole);
            if (success)
            {
                await LoadMembers(); // Refresh the member list
                
                // Show success message for ownership changes
                if (newRole == Roles.OrganizationOwner)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"✅ {memberName} has been successfully promoted to Owner.");
                }
                else if (currentRole == Roles.OrganizationOwner)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"✅ {memberName} has been successfully demoted from Owner to {GetRoleDisplayName(newRole)}.");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update member role. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating member role: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while updating the member role.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RemoveMember(int userId)
    {
        if (isProcessing) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this member from the organization?");
        if (!confirmed) return;
        
        isProcessing = true;
        try
        {
            var success = await OrganizationService.RemoveMemberAsync(Id, userId);
            if (success)
            {
                await LoadMembers(); // Refresh the member list
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to remove member. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing member: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while removing the member.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void OpenFindUserModal()
    {
        // Reset the forms
        findUserModel = new FindUserByEmailDto
        {
            Email = string.Empty,
            OrganizationRole = string.Empty
        };
        createUserModel = new CreateUserAndAddMemberDto
        {
            Email = string.Empty,
            FirstName = string.Empty,
            LastName = string.Empty,
            Password = string.Empty,
            ConfirmPassword = string.Empty,
            OrganizationRole = string.Empty
        };
        findUserErrorMessage = string.Empty;
        createUserErrorMessage = string.Empty;
        
        // Show the first modal
        showFindUserModal = true;
        showCreateUserModal = false;
    }
    
    private void CloseFindUserModal()
    {
        showFindUserModal = false;
        findUserErrorMessage = string.Empty;
    }

    private void CloseCreateUserModal()
    {
        showCreateUserModal = false;
        createUserErrorMessage = string.Empty;
    }

    private void GoBackToFindUser()
    {
        showCreateUserModal = false;
        showFindUserModal = true;
        createUserErrorMessage = string.Empty;
    }

    private async Task HandleFindUser()
    {
        if (isAddingMember) return;
        
        isAddingMember = true;
        findUserErrorMessage = string.Empty;
        
        try
        {
            // Step 1: Check if user exists
            var existingUser = await OrganizationService.CheckUserExistsByEmailAsync(findUserModel.Email);
            
            if (existingUser != null)
            {
                // User exists, add them directly
                var result = await OrganizationService.FindAndAddMemberAsync(Id, findUserModel);
                if (result != null)
                {
                    await LoadMembers(); // Refresh the member list
                    
                    // Close modal and show success
                    showFindUserModal = false;
                    await JSRuntime.InvokeVoidAsync("alert", $"User {existingUser.Username} has been successfully added to the organization.");
                }
                else
                {
                    findUserErrorMessage = "Failed to add existing user. They may already be a member of this organization.";
                }
            }
            else
            {
                // User doesn't exist, show create user modal
                createUserModel.Email = findUserModel.Email;
                createUserModel.OrganizationRole = findUserModel.OrganizationRole;
                
                showFindUserModal = false;
                showCreateUserModal = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error finding user: {ex.Message}");
            findUserErrorMessage = "An error occurred while checking the user. Please try again.";
        }
        finally
        {
            isAddingMember = false;
        }
    }

    private async Task HandleCreateUser()
    {
        if (isAddingMember) return;
        
        isAddingMember = true;
        createUserErrorMessage = string.Empty;
        
        try
        {
            // Validate password confirmation
            if (createUserModel.Password != createUserModel.ConfirmPassword)
            {
                createUserErrorMessage = "Password and confirm password do not match.";
                return;
            }

            var result = await OrganizationService.CreateAndAddMemberAsync(Id, createUserModel);
            if (result != null)
            {
                await LoadMembers(); // Refresh the member list
                
                // Close modal and show success
                showCreateUserModal = false;
                await JSRuntime.InvokeVoidAsync("alert", $"New user has been created and added to the organization successfully.");
            }
            else
            {
                createUserErrorMessage = "Failed to create user and add to organization. Please check the information and try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating user: {ex.Message}");
            createUserErrorMessage = "An error occurred while creating the user. Please try again.";
        }
        finally
        {
            isAddingMember = false;
        }
    }

    private void CreateProject()
    {
        Navigation.NavigateTo($"/projects/create?organizationId={Id}");
    }

    private void ViewProject(Guid projectId)
    {
        Navigation.NavigateTo($"/projects/{projectId}");
    }

    private string GetRoleBadgeColor(string role)
    {
        return role switch
        {
            Roles.OrganizationOwner => "primary",
            Roles.OrganizationAdmin => "success",
            Roles.OrganizationMember => "secondary",
            _ => "light"
        };
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            Roles.OrganizationOwner => "Owner",
            Roles.OrganizationAdmin => "Admin",
            Roles.OrganizationMember => "Member",
            _ => role
        };
    }

    private string GetProjectStatusBadgeColor(string status)
    {
        return status switch
        {
            "Active" => "success",
            "InProgress" => "primary",
            "Completed" => "info",
            "OnHold" => "warning",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }

    private void ToggleEditMode()
    {
        Navigation.NavigateTo($"/organizations/{Id}/edit");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/organizations/{Id}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/organizations");
    }

    private async Task CleanupOrphanedMember(int membershipId)
    {
        if (isProcessing) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "このユーザーは削除されており、メンバーシップデータが孤立しています。このデータを削除しますか？\n\n" +
            "この操作は元に戻せません。");
        if (!confirmed) return;
        
        isProcessing = true;
        try
        {
            // Direct membership cleanup - we'll use the existing RemoveMember but need to find the userId
            var orphanedMember = members?.Items?.FirstOrDefault(m => m.Id == membershipId);
            if (orphanedMember != null)
            {
                var success = await OrganizationService.RemoveMemberAsync(Id, orphanedMember.UserId);
                if (success)
                {
                    await LoadMembers(); // Refresh the member list
                    await JSRuntime.InvokeVoidAsync("alert", "孤立したメンバーシップデータが正常に削除されました。");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "クリーンアップに失敗しました。もう一度お試しください。");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "メンバーシップデータが見つかりませんでした。");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up orphaned member: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "クリーンアップ中にエラーが発生しました。");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private int GetOrphanedMembersCount()
    {
        return members?.Items?.Count(m => m.User == null) ?? 0;
    }

    private async Task CleanupAllOrphanedMembers()
    {
        if (isProcessing) return;

        var orphanedCount = GetOrphanedMembersCount();
        if (orphanedCount == 0) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"削除されたユーザーに関連する {orphanedCount} 個の孤立したメンバーシップデータを一括削除しますか？\n\n" +
            "この操作は元に戻せません。");
        if (!confirmed) return;
        
        isProcessing = true;
        var successCount = 0;
        var failureCount = 0;
        
        try
        {
            var orphanedMembers = members?.Items?.Where(m => m.User == null).ToList() ?? new List<OrganizationMemberDto>();
            
            foreach (var orphanedMember in orphanedMembers)
            {
                try
                {
                    var success = await OrganizationService.RemoveMemberAsync(Id, orphanedMember.UserId);
                    if (success)
                    {
                        successCount++;
                    }
                    else
                    {
                        failureCount++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error removing orphaned member {orphanedMember.UserId}: {ex.Message}");
                    failureCount++;
                }
            }

            await LoadMembers(); // Refresh the member list
            
            var message = $"一括クリーンアップが完了しました。\n成功: {successCount}件";
            if (failureCount > 0)
            {
                message += $"\n失敗: {failureCount}件";
            }
            
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during bulk cleanup: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "一括クリーンアップ中にエラーが発生しました。");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ShowTransferOwnershipSection()
    {
        showTransferOwnershipSection = true;
        selectedNewOwnerId = 0;
    }

    private void CancelTransferOwnership()
    {
        showTransferOwnershipSection = false;
        selectedNewOwnerId = 0;
    }

    private async Task ConfirmTransferOwnership()
    {
        if (selectedNewOwnerId == 0 || isProcessing) return;

        // Get the selected member information
        var selectedMember = members?.Items?.FirstOrDefault(m => m.UserId == selectedNewOwnerId);
        if (selectedMember?.User == null) return;

        var newOwnerName = selectedMember.User.Username;
        var currentOwnerName = currentUser?.Username ?? "Unknown";

        // Show final confirmation dialog
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"🚨 TRANSFER OWNERSHIP CONFIRMATION 🚨\n\n" +
            $"Are you absolutely sure you want to transfer ownership of this organization?\n\n" +
            $"FROM: {currentOwnerName} (You)\n" +
            $"TO: {newOwnerName}\n\n" +
            $"After this transfer:\n" +
            $"• {newOwnerName} will become the new Owner\n" +
            $"• You will become a regular Admin\n" +
            $"• {newOwnerName} will have full control over the organization\n" +
            $"• This action CANNOT be undone without {newOwnerName}'s permission\n\n" +
            $"Type 'TRANSFER' to confirm (case-sensitive):");

        if (!confirmed) return;

        // Additional confirmation with typing requirement
        var typeConfirmation = await JSRuntime.InvokeAsync<string>("prompt", 
            $"Please type 'TRANSFER' to confirm the ownership transfer:");

        if (typeConfirmation != "TRANSFER")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Transfer cancelled. You must type 'TRANSFER' exactly to confirm.");
            return;
        }

        isProcessing = true;
        try
        {
            var success = await OrganizationService.TransferOwnershipAsync(Id, selectedNewOwnerId);
            if (success)
            {
                await LoadMembers(); // Refresh the member list
                await LoadCurrentUser(); // Refresh current user info
                
                // Hide the transfer section
                showTransferOwnershipSection = false;
                selectedNewOwnerId = 0;
                
                await JSRuntime.InvokeVoidAsync("alert", 
                    $"✅ Ownership successfully transferred to {newOwnerName}!\n\n" +
                    $"You are now a regular Admin in this organization.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    "Failed to transfer ownership. Please check that the selected member is still active and try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error transferring ownership: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while transferring ownership. Please try again.");
        }
        finally
        {
            isProcessing = false;
        }
    }
}