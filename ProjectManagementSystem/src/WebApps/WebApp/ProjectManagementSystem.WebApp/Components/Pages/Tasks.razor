@page "/tasks"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.WebApp.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Common.Models
@using ProjectManagementSystem.Shared.Common.Constants
@rendermode InteractiveServer
@attribute [Authorize]
@inject ITaskService TaskService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop

<PageTitle>My Tasks - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>My Tasks</h2>
                <div>
                    <button class="btn btn-outline-secondary me-2" @onclick="ToggleView">
                        <i class="bi @(isKanbanView ? "bi-list" : "bi-kanban")"></i> 
                        @(isKanbanView ? "List View" : "Kanban View")
                    </button>
                    <button class="btn btn-primary" @onclick="NavigateToCreate">
                        <i class="bi bi-plus-circle"></i> Create Task
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (tasks?.Items?.Any() == true)
            {
                @if (isKanbanView)
                {
                    <!-- Kanban View -->
                    <div class="row">
                        @foreach (var status in taskStatuses)
                        {
                            <div class="col-md-3 mb-4">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">@status</h6>
                                        <span class="badge bg-secondary">@GetTaskCountByStatus(status)</span>
                                    </div>
                                    <div class="card-body p-2" style="min-height: 400px;">
                                        @foreach (var task in GetTasksByStatus(status))
                                        {
                                            <div class="card mb-2" style="cursor: pointer;" @onclick="() => ViewTask(task.Id)">
                                                <div class="card-body p-3">
                                                    <h6 class="card-title mb-2">@task.Title</h6>
                                                    @if (!string.IsNullOrEmpty(task.Description))
                                                    {
                                                        <p class="card-text small text-muted mb-2">
                                                            @(task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)
                                                        </p>
                                                    }
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span class="badge @GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                                                        @if (task.DueDate.HasValue)
                                                        {
                                                            <small class="text-muted">Due: @task.DueDate.Value.ToString("MMM dd")</small>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- List View -->
                    <div class="card">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Title</th>
                                            <th>Status</th>
                                            <th>Priority</th>
                                            <th>Due Date</th>
                                            <th>Project</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var task in tasks.Items)
                                        {
                                            <tr>
                                                <td>
                                                    <div>
                                                        <strong>@task.Title</strong>
                                                        @if (!string.IsNullOrEmpty(task.Description))
                                                        {
                                                            <br />
                                                            <small class="text-muted">@(task.Description.Length > 50 ? task.Description.Substring(0, 50) + "..." : task.Description)</small>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(task.Status)">@task.Status</span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                                                </td>
                                                <td>
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span class="@(task.DueDate < DateTime.UtcNow ? "text-danger" : "")">
                                                            @task.DueDate.Value.ToString("MMM dd, yyyy")
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">No due date</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="text-muted">Project #@task.ProjectId</span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ViewTask(task.Id)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => EditTask(task.Id)">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTask(task.Id)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (tasks.TotalCount > tasks.PageSize)
                            {
                                <nav aria-label="Tasks pagination">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(tasks.PageNumber <= 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => LoadPage(tasks.PageNumber - 1)" disabled="@(tasks.PageNumber <= 1)">
                                                Previous
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, tasks.PageNumber - 2); i <= Math.Min(tasks.TotalPages, tasks.PageNumber + 2); i++)
                                        {
                                            <li class="page-item @(i == tasks.PageNumber ? "active" : "")">
                                                <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(tasks.PageNumber >= tasks.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => LoadPage(tasks.PageNumber + 1)" disabled="@(tasks.PageNumber >= tasks.TotalPages)">
                                                Next
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-list-check" style="font-size: 3rem; color: #6c757d;"></i>
                        <h5 class="mt-3">No tasks found</h5>
                        <p class="text-muted">You don't have any tasks assigned to you yet.</p>
                        <button class="btn btn-primary" @onclick="NavigateToCreate">
                            <i class="bi bi-plus-circle"></i> Create Task
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private PagedResult<TaskDto>? tasks;
    private bool isLoading = true;
    private bool isKanbanView = true;
    private readonly string[] taskStatuses = { ProjectManagementSystem.Shared.Common.Constants.TaskStatus.ToDo, ProjectManagementSystem.Shared.Common.Constants.TaskStatus.InProgress, ProjectManagementSystem.Shared.Common.Constants.TaskStatus.InReview, ProjectManagementSystem.Shared.Common.Constants.TaskStatus.Done };

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks(int pageNumber = 1)
    {
        isLoading = true;
        try
        {
            tasks = await TaskService.GetTasksByUserAsync(pageNumber, 50); // Load more for kanban view
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        await LoadTasks(pageNumber);
    }

    private void ToggleView()
    {
        isKanbanView = !isKanbanView;
    }

    private IEnumerable<TaskDto> GetTasksByStatus(string status)
    {
        return tasks?.Items?.Where(t => t.Status == status) ?? Enumerable.Empty<TaskDto>();
    }

    private int GetTaskCountByStatus(string status)
    {
        return GetTasksByStatus(status).Count();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/tasks/create");
    }

    private void ViewTask(int id)
    {
        Navigation.NavigateTo($"/tasks/{id}");
    }

    private void EditTask(int id)
    {
        Navigation.NavigateTo($"/tasks/{id}/edit");
    }

    private async Task DeleteTask(int id)
    {
        if (await JSInterop.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?"))
        {
            var success = await TaskService.DeleteTaskAsync(id);
            if (success)
            {
                await LoadTasks(tasks?.PageNumber ?? 1);
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            ProjectManagementSystem.Shared.Common.Constants.TaskStatus.ToDo => "bg-secondary",
            ProjectManagementSystem.Shared.Common.Constants.TaskStatus.InProgress => "bg-warning",
            ProjectManagementSystem.Shared.Common.Constants.TaskStatus.InReview => "bg-info",
            ProjectManagementSystem.Shared.Common.Constants.TaskStatus.Done => "bg-success",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            Priority.High => "bg-danger",
            Priority.Medium => "bg-warning",
            Priority.Low => "bg-info",
            _ => "bg-secondary"
        };
    }
}