@page "/"

@inject ILogger<Home> Logger
@using ProjectManagementSystem.Shared.Client.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Models
@using ProjectManagementSystem.Shared.Client.Constants
@using TaskStatusConst = ProjectManagementSystem.WebApp.Wasm.Client.Constants.TaskStatus
@inject AuthenticationStateProvider AuthStateProvider
@inject ITaskService TaskService
@inject IProjectService ProjectService
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation

<PageTitle>プロジェクト管理システム - ホーム</PageTitle>

<!-- Hero Section -->
<div class="modern-card modern-shadow-lg animate-page-enter" style="background: linear-gradient(135deg, var(--color-primary-500) 0%, var(--color-primary-700) 50%, var(--color-secondary-700) 100%); color: white; margin-bottom: var(--space-8);">
    <div class="modern-card-body" style="padding: var(--space-10) var(--space-8);">
        <div style="display: flex; align-items: center; gap: var(--space-4); margin-bottom: var(--space-6);">
            <div style="font-size: 3rem;" class="animate-bounce-in animate-delay-300">🚀</div>
            <div>
                <h1 style="font-size: var(--font-size-4xl); font-weight: var(--font-weight-bold); margin: 0; margin-bottom: var(--space-2);" class="animate-slide-in-left animate-delay-200">
                    プロジェクト管理システム
                </h1>
                <p style="font-size: var(--font-size-lg); opacity: 0.9; margin: 0;" class="animate-slide-in-left animate-delay-500">
                    効率的なチーム協働とプロジェクト管理のためのモダンプラットフォーム
                </p>
            </div>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--space-6); margin-top: var(--space-8);">
            <div style="text-align: center;" class="animate-fade-in animate-delay-700">
                <div style="font-size: var(--font-size-2xl); margin-bottom: var(--space-2);" class="hover-float">📊</div>
                <h3 style="font-size: var(--font-size-lg); font-weight: var(--font-weight-semibold); margin-bottom: var(--space-1);">プロジェクト管理</h3>
                <p style="font-size: var(--font-size-sm); opacity: 0.8; margin: 0;">進捗の可視化と効率的な管理</p>
            </div>
            <div style="text-align: center;" class="animate-fade-in animate-delay-1000">
                <div style="font-size: var(--font-size-2xl); margin-bottom: var(--space-2);" class="hover-pulse">👥</div>
                <h3 style="font-size: var(--font-size-lg); font-weight: var(--font-weight-semibold); margin-bottom: var(--space-1);">チーム協働</h3>
                <p style="font-size: var(--font-size-sm); opacity: 0.8; margin: 0;">シームレスなコミュニケーション</p>
            </div>
            <div style="text-align: center;" class="animate-fade-in animate-delay-1000">
                <div style="font-size: var(--font-size-2xl); margin-bottom: var(--space-2);" class="hover-wiggle">📋</div>
                <h3 style="font-size: var(--font-size-lg); font-weight: var(--font-weight-semibold); margin-bottom: var(--space-1);">タスク管理</h3>
                <p style="font-size: var(--font-size-sm); opacity: 0.8; margin: 0;">詳細な進捗トラッキング</p>
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions Grid -->
<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: var(--space-6); margin-bottom: var(--space-8);">
    
    <!-- Organizations Card -->
    <div class="modern-card modern-hover-lift animate-slide-in-bottom animate-delay-200">
        <div class="modern-card-header">
            <h3 class="modern-card-title">
                <span style="font-size: var(--font-size-xl);" class="hover-bounce">🏢</span>
                組織管理
            </h3>
            <p class="modern-card-subtitle">組織とメンバーシップの管理</p>
        </div>
        <div class="modern-card-body">
            <p style="color: var(--color-gray-600); margin-bottom: var(--space-4);">
                組織の作成、編集、メンバーの招待や権限管理を行います。
            </p>
            <AuthorizeView>
                <Authorized>
                    <div style="display: flex; gap: var(--space-3);">
                        <a href="/organizations" class="btn btn-primary btn-sm btn-animated ripple">
                            組織一覧を見る
                        </a>
                        <a href="/organizations/create" class="btn btn-outline btn-sm btn-animated ripple">
                            新規作成
                        </a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div style="padding: var(--space-3); background: var(--color-gray-100); border-radius: var(--radius-md); border: 1px solid var(--color-gray-200);">
                        <p style="color: var(--color-gray-600); margin: 0; font-size: var(--font-size-sm);">
                            ログイン後にご利用いただけます
                        </p>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <!-- Projects Card -->
    <div class="modern-card modern-hover-lift animate-slide-in-bottom animate-delay-500">
        <div class="modern-card-header">
            <h3 class="modern-card-title">
                <span style="font-size: var(--font-size-xl);" class="hover-bounce">📁</span>
                プロジェクト管理
            </h3>
            <p class="modern-card-subtitle">プロジェクトの作成と進捗管理</p>
        </div>
        <div class="modern-card-body">
            <p style="color: var(--color-gray-600); margin-bottom: var(--space-4);">
                プロジェクトの計画、実行、監視を一元的に管理します。
            </p>
            <AuthorizeView>
                <Authorized>
                    <div style="display: flex; gap: var(--space-3);">
                        <a href="/projects" class="btn btn-primary btn-sm btn-animated ripple">
                            プロジェクト一覧
                        </a>
                        <a href="/projects/create" class="btn btn-outline btn-sm btn-animated ripple">
                            新規作成
                        </a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div style="padding: var(--space-3); background: var(--color-gray-100); border-radius: var(--radius-md); border: 1px solid var(--color-gray-200);">
                        <p style="color: var(--color-gray-600); margin: 0; font-size: var(--font-size-sm);">
                            ログイン後にご利用いただけます
                        </p>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <!-- Tasks Card -->
    <div class="modern-card modern-hover-lift animate-slide-in-bottom animate-delay-700">
        <div class="modern-card-header">
            <h3 class="modern-card-title">
                <span style="font-size: var(--font-size-xl);" class="hover-bounce">✅</span>
                タスク管理
            </h3>
            <p class="modern-card-subtitle">詳細なタスクトラッキング</p>
        </div>
        <div class="modern-card-body">
            <p style="color: var(--color-gray-600); margin-bottom: var(--space-4);">
                個別タスクの作成、割り当て、進捗状況の追跡を行います。
            </p>
            <AuthorizeView>
                <Authorized>
                    <div style="display: flex; gap: var(--space-3);">
                        <a href="/tasks" class="btn btn-primary btn-sm btn-animated ripple">
                            タスク一覧
                        </a>
                        <a href="/tasks/create" class="btn btn-outline btn-sm btn-animated ripple">
                            新規作成
                        </a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div style="padding: var(--space-3); background: var(--color-gray-100); border-radius: var(--radius-md); border: 1px solid var(--color-gray-200);">
                        <p style="color: var(--color-gray-600); margin: 0; font-size: var(--font-size-sm);">
                            ログイン後にご利用いただけます
                        </p>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <!-- Admin Card - Only for System Admins -->
    <AuthorizeView>
        <Authorized>
            @if (isSystemAdmin)
            {
                <div class="modern-card modern-hover-lift animate-slide-in-bottom animate-delay-900" style="border: 2px solid var(--color-warning-200);">
                    <div class="modern-card-header">
                        <h3 class="modern-card-title">
                            <span style="font-size: var(--font-size-xl);" class="hover-bounce">👑</span>
                            システム管理
                        </h3>
                        <p class="modern-card-subtitle">システム管理者機能</p>
                    </div>
                    <div class="modern-card-body">
                        <p style="color: var(--color-gray-600); margin-bottom: var(--space-4);">
                            ユーザー、システム設定、データの管理を行います。
                        </p>
                        <div style="display: flex; gap: var(--space-3);">
                            <a href="/users" class="btn btn-warning btn-sm btn-animated ripple">
                                ユーザー管理
                            </a>
                            <a href="/users/create" class="btn btn-outline-warning btn-sm btn-animated ripple">
                                ユーザー作成
                            </a>
                        </div>
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</div>


<!-- Dashboard - Only for authenticated users -->
<AuthorizeView>
    <Authorized>
        <!-- Quick Stats Overview -->
        <div class="modern-card mb-4">
            <div class="modern-card-header">
                <h3 class="modern-card-title">
                    <span style="font-size: var(--font-size-lg);">📊</span>
                    ダッシュボード
                </h3>
                <p class="modern-card-subtitle">あなたのタスクと進捗状況</p>
            </div>
            <div class="modern-card-body">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--space-6);">
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-primary-50); border-radius: var(--radius-lg); border: 2px solid var(--color-primary-100);" class="modern-hover-lift animate-scale-in animate-delay-200">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-primary-600);" class="count-up">@(taskStats?.TotalTasks ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">総タスク数</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-warning-50); border-radius: var(--radius-lg); border: 2px solid var(--color-warning-100);" class="modern-hover-lift animate-scale-in animate-delay-300">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-warning-600);" class="count-up">@(taskStats?.InProgressTasks ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">進行中</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-success-50); border-radius: var(--radius-lg); border: 2px solid var(--color-success-100);" class="modern-hover-lift animate-scale-in animate-delay-400">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-success-600);" class="count-up">@(taskStats?.CompletedTasks ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">完了済み</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-error-50); border-radius: var(--radius-lg); border: 2px solid var(--color-error-100);" class="modern-hover-lift animate-scale-in animate-delay-500">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-error-600);" class="count-up">@(taskStats?.OverdueTasks ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">期限超過</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Task Status Breakdown -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="modern-card">
                    <div class="modern-card-header">
                        <h5 class="modern-card-title">
                            <i class="bi bi-kanban me-2"></i>
                            最近のタスク
                        </h5>
                    </div>
                    <div class="modern-card-body">
                        @if (recentTasks?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>タスク</th>
                                            <th>ステータス</th>
                                            <th>優先度</th>
                                            <th>期限</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var task in recentTasks.Take(5))
                                        {
                                            <tr class="task-row-dashboard" @onclick="() => NavigateToTask(task.Id)">
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <i class="@GetPriorityIcon(task.Priority) me-2" style="color: @GetPriorityColor(task.Priority); font-size: 0.8rem;"></i>
                                                        <div>
                                                            <div class="fw-semibold">@task.Title</div>
                                                            @if (!string.IsNullOrEmpty(task.Description))
                                                            {
                                                                <small class="text-muted">@(task.Description.Length > 40 ? task.Description.Substring(0, 40) + "..." : task.Description)</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(task.Status)">
                                                        <i class="@GetStatusIcon(task.Status) me-1" style="font-size: 0.75rem;"></i>
                                                        @GetStatusDisplayName(task.Status)
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                                                </td>
                                                <td>
                                                    @if (task.DueDate.HasValue)
                                                    {
                                                        <span class="@GetDueDateClass(task.DueDate.Value)">
                                                            @GetDueDateText(task.DueDate.Value)
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">未設定</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="text-center mt-3">
                                <a href="/tasks" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-arrow-right me-1"></i>
                                    すべてのタスクを見る
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-list-check text-muted" style="font-size: 3rem;"></i>
                                <h6 class="mt-3 text-muted">タスクがありません</h6>
                                <p class="text-muted">新しいタスクを作成してください。</p>
                                <a href="/tasks/create" class="btn btn-primary btn-sm">
                                    <i class="bi bi-plus-circle me-1"></i>
                                    タスクを作成
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="modern-card">
                    <div class="modern-card-header">
                        <h5 class="modern-card-title">
                            <i class="bi bi-pie-chart me-2"></i>
                            進捗サマリー
                        </h5>
                    </div>
                    <div class="modern-card-body">
                        @if (taskStats != null && taskStats.TotalTasks > 0)
                        {
                            <div class="progress-summary">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="text-muted">完了率</small>
                                        <small class="fw-semibold">@GetCompletionPercentage()%</small>
                                    </div>
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: @GetCompletionPercentage()%"></div>
                                    </div>
                                </div>
                                
                                <div class="status-breakdown">
                                    <div class="d-flex justify-content-between py-2 border-bottom">
                                        <span class="text-muted"><i class="bi bi-circle-fill text-secondary me-2"></i>ToDo</span>
                                        <span class="fw-semibold">@(taskStats.ToDoTasks)</span>
                                    </div>
                                    <div class="d-flex justify-content-between py-2 border-bottom">
                                        <span class="text-muted"><i class="bi bi-arrow-clockwise text-warning me-2"></i>進行中</span>
                                        <span class="fw-semibold">@(taskStats.InProgressTasks)</span>
                                    </div>
                                    <div class="d-flex justify-content-between py-2 border-bottom">
                                        <span class="text-muted"><i class="bi bi-eye text-info me-2"></i>レビュー</span>
                                        <span class="fw-semibold">@(taskStats.InReviewTasks)</span>
                                    </div>
                                    <div class="d-flex justify-content-between py-2">
                                        <span class="text-muted"><i class="bi bi-check-circle-fill text-success me-2"></i>完了</span>
                                        <span class="fw-semibold">@(taskStats.CompletedTasks)</span>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center">
                                <i class="bi bi-graph-up text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2 mb-0">統計データなし</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- User Activity -->
        <div class="modern-card">
            <div class="modern-card-header">
                <h3 class="modern-card-title">
                    <span style="font-size: var(--font-size-lg);">📈</span>
                    アクティビティ概要
                </h3>
                <p class="modern-card-subtitle">参加プロジェクトと組織</p>
            </div>
            <div class="modern-card-body">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--space-6);">
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-primary-50); border-radius: var(--radius-lg);" class="modern-hover-lift animate-scale-in animate-delay-200">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-primary-600);" class="count-up">@(userStats?.ActiveProjects ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">参加プロジェクト</div>
                    </div>
                    <div style="text-align: center; padding: var(--space-4); background: var(--color-secondary-50); border-radius: var(--radius-lg);" class="modern-hover-lift animate-scale-in animate-delay-700">
                        <div style="font-size: var(--font-size-2xl); font-weight: var(--font-weight-bold); color: var(--color-secondary-600);" class="count-up">@(userStats?.OrganizationCount ?? 0)</div>
                        <div style="font-size: var(--font-size-sm); color: var(--color-gray-600);">所属組織</div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private UserActivityStats? userStats;
    private TaskStatsDto? taskStats;
    private List<TaskDto>? recentTasks;
    private bool isSystemAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Home component initialized (WebAssembly)");
        
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Check if user is system admin
            var userRole = authState.User.FindFirst("Role")?.Value 
                        ?? authState.User.FindFirst("role")?.Value
                        ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            isSystemAdmin = userRole == Roles.SystemAdmin;

            await LoadUserStats();
            await LoadTaskStats();
            await LoadRecentTasks();
        }
        
        await base.OnInitializedAsync();
    }

    private async Task LoadUserStats()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Get user's organizations
                var organizationsResult = await OrganizationService.GetOrganizationsAsync(1, 100);
                var organizationCount = organizationsResult?.Items?.Count() ?? 0;
                
                // Get user's projects  
                var projectsResult = await ProjectService.GetProjectsAsync(1, 100);
                var activeProjects = projectsResult?.Items?.Count() ?? 0;

                // Get task statistics
                var tasksResult = await TaskService.GetTasksByUserAsync(1, 1000);
                var allTasks = tasksResult?.Items?.ToList() ?? new List<TaskDto>();
                var completedTasks = allTasks.Count(t => t.Status == TaskStatusConst.Done);
                var pendingTasks = allTasks.Count(t => t.Status != TaskStatusConst.Done);

                userStats = new UserActivityStats
                {
                    ActiveProjects = activeProjects,
                    CompletedTasks = completedTasks,
                    PendingTasks = pendingTasks,
                    OrganizationCount = organizationCount
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load user statistics");
            // Fallback to empty stats
            userStats = new UserActivityStats
            {
                ActiveProjects = 0,
                CompletedTasks = 0,
                PendingTasks = 0,
                OrganizationCount = 0
            };
        }
    }

    private async Task LoadTaskStats()
    {
        try
        {
            var allTasks = await TaskService.GetTasksByUserAsync(1, 100);
            if (allTasks?.Items != null)
            {
                var now = DateTime.UtcNow;
                var tasks = allTasks.Items.ToList();

                taskStats = new TaskStatsDto
                {
                    TotalTasks = tasks.Count,
                    ToDoTasks = tasks.Count(t => t.Status == TaskStatusConst.ToDo),
                    InProgressTasks = tasks.Count(t => t.Status == TaskStatusConst.InProgress),
                    InReviewTasks = tasks.Count(t => t.Status == TaskStatusConst.InReview),
                    CompletedTasks = tasks.Count(t => t.Status == TaskStatusConst.Done),
                    OverdueTasks = tasks.Count(t => t.DueDate.HasValue && t.DueDate < now && t.Status != TaskStatusConst.Done)
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load task statistics");
        }
    }

    private async Task LoadRecentTasks()
    {
        try
        {
            var result = await TaskService.GetTasksByUserAsync(1, 10);
            if (result?.Items != null)
            {
                recentTasks = result.Items.OrderByDescending(t => t.UpdatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load recent tasks");
        }
    }

    // Task-related helper methods (borrowed from Tasks.razor)
    private string GetPriorityIcon(string priority)
    {
        return priority switch
        {
            Priority.High => "bi bi-exclamation-triangle-fill",
            Priority.Medium => "bi bi-exclamation-circle-fill", 
            Priority.Low => "bi bi-info-circle-fill",
            _ => "bi bi-circle-fill"
        };
    }

    private string GetPriorityColor(string priority)
    {
        return priority switch
        {
            Priority.High => "#dc3545",     // Red
            Priority.Medium => "#fd7e14",   // Orange
            Priority.Low => "#17a2b8",      // Blue
            _ => "#6c757d"                  // Gray
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            TaskStatusConst.ToDo => "bi bi-circle",
            TaskStatusConst.InProgress => "bi bi-arrow-clockwise",
            TaskStatusConst.InReview => "bi bi-eye",
            TaskStatusConst.Done => "bi bi-check-circle-fill",
            _ => "bi bi-question-circle"
        };
    }

    private string GetStatusDisplayName(string status)
    {
        return status switch
        {
            TaskStatusConst.ToDo => "To Do",
            TaskStatusConst.InProgress => "In Progress",
            TaskStatusConst.InReview => "In Review",
            TaskStatusConst.Done => "Done",
            _ => status
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            TaskStatusConst.ToDo => "bg-secondary",
            TaskStatusConst.InProgress => "bg-warning",
            TaskStatusConst.InReview => "bg-info",
            TaskStatusConst.Done => "bg-success",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            Priority.High => "bg-danger",
            Priority.Medium => "bg-warning",
            Priority.Low => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass(DateTime dueDate)
    {
        var now = DateTime.UtcNow;
        var daysUntilDue = (dueDate - now).TotalDays;

        return daysUntilDue switch
        {
            ( < 0) => "text-danger fw-semibold",           // Past due
            ( <= 1) => "text-warning fw-semibold",        // Due today or tomorrow
            ( <= 3) => "text-warning",                    // Due soon
            _ => "text-muted"                             // Normal
        };
    }

    private string GetDueDateText(DateTime dueDate)
    {
        var now = DateTime.UtcNow;
        var daysUntilDue = (dueDate - now).TotalDays;

        return daysUntilDue switch
        {
            ( < 0) when Math.Abs(daysUntilDue) == 1 => "1日期限切れ",
            ( < 0) => $"{Math.Abs((int)daysUntilDue)}日期限切れ",
            ( <= 1) when daysUntilDue < 0.5 => "今日まで",
            ( <= 1) => "明日まで", 
            ( <= 7) => $"{(int)daysUntilDue}日後",
            _ => dueDate.ToString("MM/dd")
        };
    }

    private int GetCompletionPercentage()
    {
        if (taskStats == null || taskStats.TotalTasks == 0) return 0;
        return (int)Math.Round((double)taskStats.CompletedTasks / taskStats.TotalTasks * 100);
    }

    private void NavigateToTask(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/{taskId}");
    }

    public class UserActivityStats
    {
        public int ActiveProjects { get; set; }
        public int CompletedTasks { get; set; }
        public int PendingTasks { get; set; }
        public int OrganizationCount { get; set; }
    }

    public class TaskStatsDto
    {
        public int TotalTasks { get; set; }
        public int ToDoTasks { get; set; }
        public int InProgressTasks { get; set; }
        public int InReviewTasks { get; set; }
        public int CompletedTasks { get; set; }
        public int OverdueTasks { get; set; }
    }
}
