@using Microsoft.JSInterop
@using ProjectManagementSystem.WebApp.Wasm.Client.Models
@using Microsoft.AspNetCore.Components
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div class="gantt-container">
    <div class="gantt-controls mb-3">
        <div class="btn-group" role="group" aria-label="View Mode Controls">
            <button type="button" class="btn @(currentViewMode == "Day" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode("Day"))">
                Day
            </button>
            <button type="button" class="btn @(currentViewMode == "Week" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode("Week"))">
                Week
            </button>
            <button type="button" class="btn @(currentViewMode == "Month" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode("Month"))">
                Month
            </button>
            <button type="button" class="btn @(currentViewMode == "Year" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode("Year"))">
                Year
            </button>
        </div>
        
        @if (ShowRefreshButton)
        {
            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="RefreshChart">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        }
    </div>
    
    @if (IsLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading Gantt chart...</p>
        </div>
    }
    else if (HasError)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle"></i>
            Error loading Gantt chart: @ErrorMessage
        </div>
    }
    else
    {
        <div id="@ChartId" class="gantt-chart"></div>
    }
</div>

@code {
    [Parameter] public List<GanttTask> Tasks { get; set; } = new();
    [Parameter] public EventCallback<GanttTask> OnTaskClick { get; set; }
    [Parameter] public EventCallback<TaskDateChangeArgs> OnTaskDateChange { get; set; }
    [Parameter] public EventCallback<TaskProgressChangeArgs> OnTaskProgressChange { get; set; }
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public string InitialViewMode { get; set; } = "Week";

    private string ChartId = $"gantt-{Guid.NewGuid():N}";
    private bool isInitialized = false;
    private bool IsLoading = false;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;
    private string currentViewMode = "Week";
    private DotNetObjectReference<GanttChart>? objRef;

    public class TaskDateChangeArgs
    {
        public string TaskId { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }

    public class TaskProgressChangeArgs
    {
        public string TaskId { get; set; } = string.Empty;
        public int Progress { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        currentViewMode = InitialViewMode;
        objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Tasks.Any())
        {
            await InitializeGantt();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isInitialized)
        {
            await UpdateTasks();
        }
    }

    private async Task InitializeGantt()
    {
        IsLoading = true;
        HasError = false;
        StateHasChanged();

        try
        {
            var options = new
            {
                view_mode = currentViewMode,
                date_format = "YYYY-MM-DD",
                popup_trigger = "click",
                language = "en",
                readonly = ReadOnly
            };

            var success = await JSRuntime.InvokeAsync<bool>("ganttInterop.createGantt", 
                ChartId, Tasks, options);
            
            if (success)
            {
                if (objRef != null)
                {
                    await JSRuntime.InvokeAsync<bool>("ganttInterop.setupEventHandlers", 
                        ChartId, objRef);
                }
                isInitialized = true;
            }
            else
            {
                HasError = true;
                ErrorMessage = "Failed to initialize Gantt chart";
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateTasks()
    {
        if (isInitialized)
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("ganttInterop.updateTasks", ChartId, Tasks);
                if (!success)
                {
                    HasError = true;
                    ErrorMessage = "Failed to update tasks";
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                HasError = true;
                ErrorMessage = ex.Message;
                StateHasChanged();
            }
        }
    }

    private async Task ChangeViewMode(string mode)
    {
        if (isInitialized)
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("ganttInterop.changeViewMode", ChartId, mode);
                if (success)
                {
                    currentViewMode = mode;
                }
            }
            catch (Exception ex)
            {
                HasError = true;
                ErrorMessage = ex.Message;
                StateHasChanged();
            }
        }
    }

    private async Task RefreshChart()
    {
        if (isInitialized)
        {
            await UpdateTasks();
        }
        else
        {
            await InitializeGantt();
        }
    }

    public async Task RefreshAsync()
    {
        await RefreshChart();
    }

    [JSInvokable]
    public async Task OnTaskClickCallback(string taskId)
    {
        var task = Tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            await OnTaskClick.InvokeAsync(task);
        }
    }

    [JSInvokable]
    public async Task OnTaskDateChangeCallback(string taskId, string startDate, string endDate)
    {
        if (DateTime.TryParse(startDate, out var start) && DateTime.TryParse(endDate, out var end))
        {
            var args = new TaskDateChangeArgs
            {
                TaskId = taskId,
                StartDate = start,
                EndDate = end
            };
            await OnTaskDateChange.InvokeAsync(args);
        }
    }

    [JSInvokable]
    public async Task OnTaskProgressChangeCallback(string taskId, int progress)
    {
        var args = new TaskProgressChangeArgs
        {
            TaskId = taskId,
            Progress = progress
        };
        await OnTaskProgressChange.InvokeAsync(args);
    }

    public async ValueTask DisposeAsync()
    {
        if (isInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("ganttInterop.dispose", ChartId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing Gantt chart: {ex.Message}");
            }
        }

        objRef?.Dispose();
    }
}

<style>
    .gantt-container {
        width: 100%;
        overflow-x: auto;
    }
    
    .gantt-chart {
        min-height: 400px;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
    }

    .gantt-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .btn-group .btn {
        transition: all 0.2s ease;
    }

    .btn-group .btn:hover {
        transform: translateY(-1px);
    }

    .gantt-chart :global(.gantt-container) {
        font-family: 'Inter', sans-serif;
    }

    .gantt-chart :global(.bar-progress) {
        fill: #28a745;
    }

    .gantt-chart :global(.bar-invalid) {
        fill: #dc3545;
    }

    .gantt-chart :global(.bar-invalid .bar-progress) {
        fill: #dc3545;
    }
</style>