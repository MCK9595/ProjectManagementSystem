@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.WebApp.Wasm.Client.Components.Shared

<div class="task-table-container">
    <!-- Header Controls -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" placeholder="Search tasks..." 
                       @bind="searchTerm" @oninput="OnSearchChanged" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex gap-2">
                <!-- Status Filter -->
                <select class="form-select" @bind="statusFilter" @bind:after="OnFiltersChanged">
                    <option value="">All Status</option>
                    <option value="todo">To Do</option>
                    <option value="inprogress">In Progress</option>
                    <option value="inreview">In Review</option>
                    <option value="done">Done</option>
                    <option value="cancelled">Cancelled</option>
                </select>
                
                <!-- Priority Filter -->
                <select class="form-select" @bind="priorityFilter" @bind:after="OnFiltersChanged">
                    <option value="">All Priority</option>
                    <option value="critical">Critical</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                </select>
                
                @if (ShowCreateAction)
                {
                    <button type="button" class="btn btn-primary" @onclick="HandleCreateTaskClick">
                        <i class="fas fa-plus me-1"></i>Create Task
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Task Table -->
    <div class="table-responsive-wrapper">
        <div class="table-responsive">
            <table class="table table-hover task-table">
            <thead class="table-light sticky-top">
                <tr>
                    <th scope="col" class="sortable-header col-task-number" @onclick="() => OnSort(nameof(TaskDto.TaskNumber))">
                        # <i class="fas @GetSortIcon(nameof(TaskDto.TaskNumber))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-title" @onclick="() => OnSort(nameof(TaskDto.Title))">
                        Title <i class="fas @GetSortIcon(nameof(TaskDto.Title))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-status d-none d-md-table-cell" @onclick="() => OnSort(nameof(TaskDto.Status))">
                        Status <i class="fas @GetSortIcon(nameof(TaskDto.Status))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-priority d-none d-lg-table-cell" @onclick="() => OnSort(nameof(TaskDto.Priority))">
                        Priority <i class="fas @GetSortIcon(nameof(TaskDto.Priority))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-assignee d-none d-lg-table-cell" @onclick="() => OnSort(nameof(TaskDto.AssignedTo))">
                        Assignee <i class="fas @GetSortIcon(nameof(TaskDto.AssignedTo))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-start-date d-none d-xl-table-cell" @onclick="() => OnSort(nameof(TaskDto.StartDate))">
                        Start Date <i class="fas @GetSortIcon(nameof(TaskDto.StartDate))"></i>
                    </th>
                    <th scope="col" class="sortable-header col-due-date" @onclick="() => OnSort(nameof(TaskDto.DueDate))">
                        Due Date <i class="fas @GetSortIcon(nameof(TaskDto.DueDate))"></i>
                    </th>
                    <th scope="col" class="col-progress d-none d-xl-table-cell">Progress</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredTasks?.Any() == true)
                {
                    @foreach (var hierarchicalTask in filteredTasks)
                    {
                        var task = hierarchicalTask.Task;
                        <tr class="task-row @(IsTaskOverdue(task) ? "task-overdue" : "") @(hierarchicalTask.HasChildren ? "parent-task" : "")"
                            data-level="@hierarchicalTask.Level"
                            tabindex="0" 
                            @onclick="() => HandleTaskClick(task)"
                            @onclick:stopPropagation="true"
                            @onkeydown="@(async (e) => await OnTaskKeyDown(e, task))">
                            
                            <td class="fw-bold text-muted">
                                #@task.TaskNumber
                            </td>
                            
                            <td class="task-title-td">
                                <div class="task-title-cell" style="padding-left: @(hierarchicalTask.Level * 30 + 10)px;">
                                    <div class="task-title-content">
                                        @if (hierarchicalTask.HasChildren)
                                        {
                                            <button type="button" 
                                                    class="btn btn-sm btn-link p-0 me-2 expand-toggle"
                                                    @onclick="() => ToggleExpand(task.Id)"
                                                    @onclick:stopPropagation="true"
                                                    title="@(hierarchicalTask.IsExpanded ? "Collapse" : "Expand")">
                                                <i class="fas @(hierarchicalTask.IsExpanded ? "fa-chevron-down" : "fa-chevron-right")"></i>
                                            </button>
                                        }
                                        else if (hierarchicalTask.Level > 0)
                                        {
                                            <span class="tree-spacer"></span>
                                        }
                                        
                                        @if (hierarchicalTask.HasChildren)
                                        {
                                            <i class="fas fa-folder me-1 text-primary"></i>
                                        }
                                        
                                        <span class="task-title">@task.Title</span>
                                        
                                        @if (hierarchicalTask.HasChildren)
                                        {
                                            <span class="badge bg-secondary ms-2" title="Number of subtasks">
                                                @task.SubTasks.Count
                                            </span>
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <small class="text-muted d-block text-truncate" style="margin-left: @(hierarchicalTask.HasChildren ? "28px" : hierarchicalTask.Level > 0 ? "20px" : "0")">
                                            @task.Description
                                        </small>
                                    }
                                    <!-- Mobile badges -->
                                    <div class="d-md-none mt-1">
                                        <StatusBadge Value="@task.Status" Type="StatusBadge.BadgeType.Status" Size="StatusBadge.BadgeSize.Small" />
                                        <StatusBadge Value="@task.Priority" Type="StatusBadge.BadgeType.Priority" Size="StatusBadge.BadgeSize.Small" />
                                    </div>
                                </div>
                            </td>
                            
                            <td class="d-none d-md-table-cell">
                                <StatusBadge Value="@task.Status" Type="StatusBadge.BadgeType.Status" Size="StatusBadge.BadgeSize.Small" />
                            </td>
                            
                            <td class="d-none d-lg-table-cell">
                                <StatusBadge Value="@task.Priority" Type="StatusBadge.BadgeType.Priority" Size="StatusBadge.BadgeSize.Small" />
                            </td>
                            
                            <td class="d-none d-lg-table-cell">
                                @if (!string.IsNullOrEmpty(task.AssignedTo?.Username))
                                {
                                    <div class="d-flex align-items-center">
                                        <div class="user-avatar me-2">
                                            @task.AssignedTo.Username.Substring(0, 1).ToUpper()
                                        </div>
                                        <span>@task.AssignedTo.Username</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">Unassigned</span>
                                }
                            </td>
                            
                            <td class="d-none d-xl-table-cell text-muted">
                                @if (task.StartDate.HasValue)
                                {
                                    @task.StartDate.Value.ToString("MMM dd")
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            
                            <td class="@(IsTaskOverdue(task) ? "text-danger fw-bold" : "")">
                                @if (task.DueDate.HasValue)
                                {
                                    <div>
                                        @task.DueDate.Value.ToString("MMM dd, yyyy")
                                        @if (IsTaskOverdue(task))
                                        {
                                            <small class="d-block">(@GetDaysOverdue(task) days overdue)</small>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">No due date</span>
                                }
                            </td>
                            
                            <td class="d-none d-xl-table-cell">
                                <div class="progress-info">
                                    <div class="progress" style="height: 8px; margin-bottom: 4px;">
                                        <div class="progress-bar @GetProgressBarClass(task)" 
                                             style="width: @task.ProgressPercentage.ToString("F1")%"></div>
                                    </div>
                                    <small class="text-muted">
                                        @task.ProgressPercentage.ToString("F1")%
                                        @if (task.IsParentTask)
                                        {
                                            <span class="badge badge-info badge-sm ms-1">Parent</span>
                                        }
                                        @if (task.EstimatedHours.HasValue && task.ActualHours.HasValue)
                                        {
                                            <br />
                                            <span>@task.ActualHours.Value.ToString("F1")h / @task.EstimatedHours.Value.ToString("F1")h</span>
                                        }
                                        else if (task.EstimatedHours.HasValue)
                                        {
                                            <br />
                                            <span>Est: @task.EstimatedHours.Value.ToString("F1")h</span>
                                        }
                                        else if (task.ActualHours.HasValue)
                                        {
                                            <br />
                                            <span>Actual: @task.ActualHours.Value.ToString("F1")h</span>
                                        }
                                    </small>
                                </div>
                            </td>
                            
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            @if (IsLoading)
                            {
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span>Loading tasks...</span>
                            }
                            else if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(priorityFilter))
                            {
                                <div class="text-muted">
                                    <i class="fas fa-search fa-2x mb-2"></i>
                                    <div>No tasks match your filters</div>
                                    <button type="button" class="btn btn-link btn-sm" @onclick="ClearFilters">
                                        Clear Filters
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="text-muted">
                                    <i class="fas fa-tasks fa-2x mb-2"></i>
                                    <div>No tasks found</div>
                                    @if (ShowCreateAction)
                                    {
                                        <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="HandleCreateTaskClick">
                                            <i class="fas fa-plus me-1"></i>Create First Task
                                        </button>
                                    }
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
            </table>
        </div>
    </div>
    
    <!-- Table Footer with count -->
    @if (filteredTasks?.Any() == true)
    {
        <div class="d-flex justify-content-between align-items-center mt-3">
            <small class="text-muted">
                Showing @filteredTasks.Count() of @(Tasks?.Count() ?? 0) tasks
            </small>
            @if (filteredTasks.Count() != (Tasks?.Count() ?? 0))
            {
                <button type="button" class="btn btn-link btn-sm" @onclick="ClearFilters">
                    Show All Tasks
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter] public IEnumerable<TaskDto>? Tasks { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool ShowCreateAction { get; set; } = false;
    [Parameter] public bool CanEditTasks { get; set; } = false;
    [Parameter] public EventCallback<TaskDto> OnTaskClick { get; set; }
    [Parameter] public EventCallback<TaskDto> OnEditTaskClick { get; set; }
    [Parameter] public EventCallback OnCreateTaskClick { get; set; }
    
    private string searchTerm = "";
    private string statusFilter = "";
    private string priorityFilter = "";
    private string sortField = nameof(TaskDto.CreatedAt);
    private bool sortAscending = false;
    
    // Hierarchy related fields
    private Dictionary<Guid, bool> expandedTasks = new();
    private List<HierarchicalTaskDto> hierarchicalTasks = new();
    
    private IEnumerable<HierarchicalTaskDto> filteredTasks => GetFilteredAndSortedTasks();
    
    // Helper class for hierarchical display
    private class HierarchicalTaskDto
    {
        public required TaskDto Task { get; init; }
        public int Level { get; init; }
        public bool IsExpanded { get; set; }
        public bool HasChildren => Task.IsParentTask;
        public bool IsVisible { get; set; } = true;
    }
    
    protected override void OnParametersSet()
    {
        BuildHierarchicalStructure();
        StateHasChanged();
    }
    
    private void BuildHierarchicalStructure()
    {
        hierarchicalTasks.Clear();
        
        if (Tasks == null) return;
        
        // Get root tasks (tasks without parent)
        var rootTasks = Tasks.Where(t => !t.ParentTaskId.HasValue).ToList();
        
        // Build hierarchy for each root task
        foreach (var rootTask in rootTasks)
        {
            AddTaskToHierarchy(rootTask, 0);
        }
    }
    
    private void AddTaskToHierarchy(TaskDto task, int level)
    {
        var hierarchicalTask = new HierarchicalTaskDto
        {
            Task = task,
            Level = level,
            IsExpanded = expandedTasks.GetValueOrDefault(task.Id, true) // Default to expanded
        };
        
        hierarchicalTasks.Add(hierarchicalTask);
        
        // Add children if task is expanded
        if (hierarchicalTask.IsExpanded && task.SubTasks.Any())
        {
            foreach (var childTask in task.SubTasks.OrderBy(t => t.TaskNumber))
            {
                AddTaskToHierarchy(childTask, level + 1);
            }
        }
    }
    
    private void ToggleExpand(Guid taskId)
    {
        if (expandedTasks.ContainsKey(taskId))
        {
            expandedTasks[taskId] = !expandedTasks[taskId];
        }
        else
        {
            expandedTasks[taskId] = true;
        }
        
        BuildHierarchicalStructure();
        StateHasChanged();
    }
    
    private IEnumerable<HierarchicalTaskDto> GetFilteredAndSortedTasks()
    {
        if (hierarchicalTasks == null || !hierarchicalTasks.Any()) 
            return Enumerable.Empty<HierarchicalTaskDto>();
        
        var filtered = hierarchicalTasks.AsEnumerable();
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            // When searching, show all matching tasks regardless of hierarchy
            var matchingTaskIds = new HashSet<Guid>();
            
            foreach (var ht in hierarchicalTasks)
            {
                if (ht.Task.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (ht.Task.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                {
                    matchingTaskIds.Add(ht.Task.Id);
                    // Also include all ancestors
                    var parentId = ht.Task.ParentTaskId;
                    while (parentId.HasValue)
                    {
                        matchingTaskIds.Add(parentId.Value);
                        var parent = hierarchicalTasks.FirstOrDefault(h => h.Task.Id == parentId.Value);
                        parentId = parent?.Task.ParentTaskId;
                    }
                }
            }
            
            filtered = filtered.Where(t => matchingTaskIds.Contains(t.Task.Id));
        }
        
        // Apply status filter
        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            filtered = filtered.Where(t => t.Task.Status.Equals(statusFilter, StringComparison.OrdinalIgnoreCase));
        }
        
        // Apply priority filter
        if (!string.IsNullOrWhiteSpace(priorityFilter))
        {
            filtered = filtered.Where(t => t.Task.Priority.Equals(priorityFilter, StringComparison.OrdinalIgnoreCase));
        }
        
        // Note: Sorting is applied within each level to maintain hierarchy
        // We don't sort across levels
        
        return filtered;
    }
    
    private IEnumerable<HierarchicalTaskDto> ApplySort(IEnumerable<HierarchicalTaskDto> tasks)
    {
        // Note: We maintain hierarchy, so sorting is complex
        // For now, we'll sort within each level
        return tasks; // Simplified for hierarchy
    }
    
    private int GetPriorityOrder(string priority)
    {
        return priority.ToLower() switch
        {
            "critical" => 4,
            "high" => 3,
            "medium" => 2,
            "low" => 1,
            _ => 0
        };
    }
    
    private void OnSort(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
    }
    
    private string GetSortIcon(string field)
    {
        if (sortField != field) return "fa-sort text-muted";
        return sortAscending ? "fa-sort-up" : "fa-sort-down";
    }
    
    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }
    
    private void OnFiltersChanged()
    {
        StateHasChanged();
    }
    
    private void ClearFilters()
    {
        searchTerm = "";
        statusFilter = "";
        priorityFilter = "";
        StateHasChanged();
    }
    
    private bool IsTaskOverdue(TaskDto task)
    {
        if (!task.DueDate.HasValue) return false;
        if (task.Status.ToLower() is "done" or "cancelled") return false;
        return task.DueDate.Value.Date < DateTime.Now.Date;
    }
    
    private int GetDaysOverdue(TaskDto task)
    {
        if (!IsTaskOverdue(task)) return 0;
        return (DateTime.Now.Date - task.DueDate!.Value.Date).Days;
    }
    
    private async Task OnTaskKeyDown(KeyboardEventArgs e, TaskDto task)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            await HandleTaskClick(task);
        }
    }
    
    private async Task HandleTaskClick(TaskDto task)
    {
        if (OnTaskClick.HasDelegate)
        {
            await OnTaskClick.InvokeAsync(task);
        }
    }
    
    private async Task HandleEditTaskClick(TaskDto task)
    {
        if (OnEditTaskClick.HasDelegate)
        {
            await OnEditTaskClick.InvokeAsync(task);
        }
    }
    
    private async Task HandleCreateTaskClick()
    {
        if (OnCreateTaskClick.HasDelegate)
        {
            await OnCreateTaskClick.InvokeAsync();
        }
    }
    
    private string GetProgressBarClass(TaskDto task)
    {
        if (task.IsParentTask)
        {
            return "bg-info"; // Blue for parent tasks
        }
        
        return task.ProgressPercentage switch
        {
            >= 100 => "bg-success",
            >= 80 => "bg-info",
            >= 50 => "bg-warning",
            >= 25 => "bg-warning",
            _ => "bg-secondary"
        };
    }
}