@using ProjectManagementSystem.WebApp.Wasm.Client.Models
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="blazor-gantt-container">
    <!-- Controls -->
    <div class="gantt-controls mb-3">
        <div class="btn-group" role="group">
            <button type="button" class="btn @(currentViewMode == ViewMode.Day ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(async () => await ChangeViewMode(ViewMode.Day))">
                日
            </button>
            <button type="button" class="btn @(currentViewMode == ViewMode.Week ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(async () => await ChangeViewMode(ViewMode.Week))">
                週
            </button>
            <button type="button" class="btn @(currentViewMode == ViewMode.Month ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(async () => await ChangeViewMode(ViewMode.Month))">
                月
            </button>
        </div>
        
        <button type="button" class="btn btn-outline-success ms-2" @onclick="ScrollToToday">
            <i class="bi bi-calendar-event"></i> Today
        </button>
        
        @if (ShowRefreshButton)
        {
            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="RefreshChart">
                <i class="bi bi-arrow-clockwise"></i> 更新
            </button>
        }
    </div>

    <!-- Chart Container -->
    @if (Tasks.Any())
    {
        <div class="gantt-wrapper">
            <div class="gantt-chart-container">
                <!-- Fixed Header Row -->
                <div class="gantt-header-row">
                    <div class="gantt-fixed-header">
                        <div class="gantt-header-cell" style="width: 200px;">タスク名</div>
                        <div class="gantt-header-cell" style="width: 100px;">担当者</div>
                        <div class="gantt-header-cell" style="width: 80px;">ステータス</div>
                        <div class="gantt-header-cell" style="width: 80px;">進捗</div>
                    </div>
                    <div class="gantt-scrollable-header">
                        <div class="gantt-date-header">
                            @foreach (var date in DateRange)
                            {
                                <div class="date-header-cell @GetDateHeaderClass(date)" 
                                     style="width: @(GetDateCellWidth())px; @GetDateHeaderStyles(date)">
                                    @FormatDateHeader(date)
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- Scrollable Content Row -->
                <div class="gantt-content-row">
                    <div class="gantt-fixed-panel">
                        <div class="gantt-task-list">
                            @foreach (var task in SortedTasks)
                            {
                                @if (IsTaskVisible(task))
                                {
                                    <div class="gantt-task-row @(GetTaskCssClass(task))" 
                                         @onclick="@(() => HandleRowClick(task))"
                                         title="@(task.TaskId != Guid.Empty ? GetTaskTooltip(task) : "")">
                                        <div class="gantt-cell" style="width: 200px; padding-left: @(GetIndentLevel(task) * 20 + 12)px;">
                                            @if (task.TaskId == Guid.Empty)
                                            {
                                                <!-- Separator row -->
                                                <i class="bi @(undatedTasksExpanded ? "bi-chevron-down" : "bi-chevron-right") me-1 expand-icon" 
                                                   @onclick="ToggleUndatedTasks" @onclick:stopPropagation="true"></i>
                                                <span class="separator-text" @onclick="ToggleUndatedTasks" @onclick:stopPropagation="true" style="cursor: pointer;">@task.Name</span>
                                            }
                                            else
                                            {
                                                @if (HasChildren(task))
                                                {
                                                    <i class="bi @(IsExpanded(task) ? "bi-chevron-down" : "bi-chevron-right") me-1 expand-icon" 
                                                       @onclick="@(() => ToggleExpand(task))" @onclick:stopPropagation="true"></i>
                                                }
                                                else
                                                {
                                                    <span class="me-3"></span>
                                                }
                                                <span class="task-name @(!task.HasDates ? "no-dates" : "")">@task.Name</span>
                                            }
                                        </div>
                                        <div class="gantt-cell" style="width: 100px;">
                                            @if (task.TaskId != Guid.Empty)
                                            {
                                                @task.AssignedTo
                                            }
                                        </div>
                                        <div class="gantt-cell" style="width: 80px;">
                                            @if (task.TaskId != Guid.Empty && !string.IsNullOrEmpty(task.Status))
                                            {
                                                <span class="badge bg-@GetStatusBadgeColor(task.Status)">@task.Status</span>
                                            }
                                        </div>
                                        <div class="gantt-cell" style="width: 80px;">
                                            @if (task.TaskId != Guid.Empty)
                                            {
                                                <span>@(task.Progress)%</span>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- Scrollable Timeline Panel -->
                    <div class="gantt-scrollable-panel">
                        <div class="gantt-timeline-container">
                            <!-- Task Bars -->
                            <div class="gantt-timeline-content">
                                @foreach (var task in SortedTasks)
                                {
                                    @if (IsTaskVisible(task))
                                    {
                                        <div class="gantt-timeline-row @GetTimelineRowClass()">
                                            <div class="task-bar-container" style="width: @(GetTotalTimelineWidth())px;">
                                                <!-- Column background styling -->
                                                @foreach (var date in DateRange)
                                                {
                                                    <div class="timeline-column @GetTimelineColumnClass(date)" 
                                                         style="width: @(GetDateCellWidth())px; left: @(GetColumnPosition(date))px;"></div>
                                                }
                                                <!-- Task bar - only render if task has dates -->
                                                @if (task.HasDates && task.TaskId != Guid.Empty)
                                                {
                                                    <div class="task-bar @GetTaskBarClass(task)" 
                                                         style="@GetTaskBarStyle(task)"
                                                         title="@GetTaskTooltip(task)"
                                                         @onclick="@(() => OnTaskClick.InvokeAsync(task))">
                                                        <!-- Progress-based segments -->
                                                        @{
                                                            var progressSegments = GetProgressSegments(task);
                                                        }
                                                        @foreach (var segment in progressSegments)
                                                        {
                                                            <div class="task-progress-segment" style="@segment.Style"></div>
                                                        }
                                                        <div class="task-bar-content">
                                                            <span class="task-bar-name">@GetTaskBarLabel(task)</span>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-4">
            <i class="bi bi-bar-chart" style="font-size: 2rem; color: #6c757d;"></i>
            <h6 class="mt-2">タスクがありません</h6>
            <p class="text-muted small">タスクを作成してガントチャートを表示してください。</p>
        </div>
    }
</div>

@code {
    [Parameter] public List<GanttTask> Tasks { get; set; } = new();
    [Parameter] public EventCallback<GanttTask> OnTaskClick { get; set; }
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public List<DateTime> ProjectHolidays { get; set; } = new();

    public enum ViewMode { Day, Week, Month }

    public class ProgressSegment
    {
        public string Style { get; set; } = "";
        public double Width { get; set; }
        public string Color { get; set; } = "";
    }

    private ViewMode currentViewMode = ViewMode.Day;
    private List<DateTime> DateRange = new();
    private List<GanttTask> SortedTasks = new();
    private Dictionary<string, bool> expandedTasks = new();
    private bool undatedTasksExpanded = true;
    private const int TaskRowHeight = 40;
    private const int DateCellWidth = 50;

    protected override void OnParametersSet()
    {
        CalculateDateRange();
        SortTasks();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SyncScrollPositions();
            // Auto-scroll to today's position on initial load
            await ScrollToToday();
        }
    }

    private async Task SyncScrollPositions()
    {
        await JSRuntime.InvokeVoidAsync("syncGanttScrollPositions");
    }

    private async Task ChangeViewMode(ViewMode mode)
    {
        currentViewMode = mode;
        CalculateDateRange();
        StateHasChanged();
        await InvokeAsync(async () =>
        {
            await Task.Delay(50); // Wait for rendering to complete
            await ScrollToToday();
        });
    }

    public void RefreshChart()
    {
        CalculateDateRange();
        SortTasks();
        StateHasChanged();
    }

    private async Task ScrollToToday()
    {
        await JSRuntime.InvokeVoidAsync("scrollGanttToPosition", GetTodayPosition());
    }

    private void CalculateDateRange()
    {
        var tasksWithDates = Tasks.Where(t => t.HasDates).ToList();
        
        if (!tasksWithDates.Any()) 
        {
            // If no tasks with dates, create a default range for current month
            var today = DateTime.Today;
            DateRange.Clear();
            
            switch (currentViewMode)
            {
                case ViewMode.Day:
                    for (int i = -15; i <= 15; i++)
                    {
                        DateRange.Add(today.AddDays(i));
                    }
                    break;
                case ViewMode.Week:
                    var startOfWeek = today.AddDays(-(int)today.DayOfWeek + 1);
                    for (int i = -4; i <= 8; i++)
                    {
                        DateRange.Add(startOfWeek.AddDays(i * 7));
                    }
                    break;
                case ViewMode.Month:
                    var startOfMonth = new DateTime(today.Year, today.Month, 1);
                    for (int i = -3; i <= 9; i++)
                    {
                        DateRange.Add(startOfMonth.AddMonths(i));
                    }
                    break;
            }
            return;
        }

        var minDate = tasksWithDates.Min(t => t.Start).Date;
        var maxDate = tasksWithDates.Max(t => t.End).Date;

        DateRange.Clear();
        var current = minDate;

        switch (currentViewMode)
        {
            case ViewMode.Day:
                // Add more padding for day view to ensure scrolling
                minDate = minDate.AddDays(-10);
                maxDate = maxDate.AddDays(10);
                current = minDate;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddDays(1);
                }
                break;
            case ViewMode.Week:
                // Add more padding for week view
                minDate = minDate.AddDays(-21); // 3 weeks before
                maxDate = maxDate.AddDays(21);  // 3 weeks after
                var startOfWeek = minDate.AddDays(-(int)minDate.DayOfWeek + 1);
                current = startOfWeek;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddDays(7);
                }
                break;
            case ViewMode.Month:
                // Add padding for month view
                minDate = minDate.AddMonths(-2);
                maxDate = maxDate.AddMonths(2);
                var startOfMonth = new DateTime(minDate.Year, minDate.Month, 1);
                current = startOfMonth;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddMonths(1);
                }
                break;
        }
    }

    private void SortTasks()
    {
        var taskDict = Tasks.ToDictionary(t => t.TaskId);
        var processed = new HashSet<Guid>();
        SortedTasks.Clear();

        // Separate tasks with dates and without dates
        var tasksWithDates = Tasks.Where(t => t.HasDates).ToList();
        var tasksWithoutDates = Tasks.Where(t => !t.HasDates).ToList();

        // Process parent tasks with dates first
        foreach (var task in tasksWithDates.Where(t => t.ParentTaskId == null))
        {
            AddTaskWithChildren(task, taskDict, processed);
        }

        // Add remaining orphaned tasks with dates
        foreach (var task in tasksWithDates.Where(t => !processed.Contains(t.TaskId)))
        {
            SortedTasks.Add(task);
        }
        
        // Add separator marker task if we have both dated and undated tasks
        if (tasksWithDates.Any() && tasksWithoutDates.Any())
        {
            SortedTasks.Add(new GanttTask 
            { 
                Id = "separator", 
                TaskId = Guid.Empty,
                Name = "--- タスク（日付未設定） ---",
                HasDates = false,
                Status = "",
                Priority = "",
                Progress = 0
            });
            
            // Only add undated tasks if the section is expanded
            if (undatedTasksExpanded)
            {
                // Process parent tasks without dates
                foreach (var task in tasksWithoutDates.Where(t => t.ParentTaskId == null))
                {
                    AddTaskWithChildren(task, taskDict, processed);
                }

                // Add remaining orphaned tasks without dates
                foreach (var task in tasksWithoutDates.Where(t => !processed.Contains(t.TaskId)))
                {
                    SortedTasks.Add(task);
                }
            }
        }
    }

    private void AddTaskWithChildren(GanttTask task, Dictionary<Guid, GanttTask> taskDict, HashSet<Guid> processed)
    {
        if (processed.Contains(task.TaskId)) return;

        SortedTasks.Add(task);
        processed.Add(task.TaskId);

        // Add children if parent is expanded
        if (IsExpanded(task))
        {
            var children = Tasks.Where(t => t.ParentTaskId == task.TaskId).ToList();
            foreach (var child in children)
            {
                AddTaskWithChildren(child, taskDict, processed);
            }
        }
    }

    private int GetIndentLevel(GanttTask task)
    {
        var level = 0;
        var current = task;
        
        while (current.ParentTaskId.HasValue)
        {
            level++;
            current = Tasks.FirstOrDefault(t => t.TaskId == current.ParentTaskId.Value);
            if (current == null) break;
        }
        
        return level;
    }

    private bool HasChildren(GanttTask task)
    {
        return Tasks.Any(t => t.ParentTaskId == task.TaskId);
    }

    private bool IsExpanded(GanttTask task)
    {
        return expandedTasks.GetValueOrDefault(task.Id, true);
    }

    private void ToggleExpand(GanttTask task)
    {
        expandedTasks[task.Id] = !IsExpanded(task);
        SortTasks();
        StateHasChanged();
    }

    private string GetTaskCssClass(GanttTask task)
    {
        var classes = new List<string>();
        
        // Check if this is a separator row
        if (task.TaskId == Guid.Empty)
        {
            classes.Add("separator");
            return string.Join(" ", classes);
        }
        
        if (task.ParentTaskId.HasValue)
        {
            classes.Add("child-task");
        }
        else
        {
            classes.Add("parent-task");
        }

        classes.Add($"priority-{task.Priority?.ToLower()}");
        classes.Add($"status-{task.Status?.ToLower().Replace(" ", "-")}");
        
        if (!task.HasDates)
        {
            classes.Add("no-dates");
        }

        return string.Join(" ", classes);
    }

    private string FormatDateHeader(DateTime date)
    {
        return currentViewMode switch
        {
            ViewMode.Day => $"{date.ToString("M/d")}\n({GetJapaneseDayOfWeek(date)})",
            ViewMode.Week => $"Week {GetWeekNumber(date)}",
            ViewMode.Month => date.ToString("MMM yyyy"),
            _ => date.ToString("M/d")
        };
    }

    private string GetJapaneseDayOfWeek(DateTime date)
    {
        return date.DayOfWeek switch
        {
            DayOfWeek.Sunday => "日",
            DayOfWeek.Monday => "月",
            DayOfWeek.Tuesday => "火",
            DayOfWeek.Wednesday => "水",
            DayOfWeek.Thursday => "木",
            DayOfWeek.Friday => "金",
            DayOfWeek.Saturday => "土",
            _ => ""
        };
    }

    private bool IsWeekend(DateTime date)
    {
        return date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
    }

    private bool IsProjectHoliday(DateTime date)
    {
        return ProjectHolidays.Any(holiday => holiday.Date == date.Date);
    }

    private bool IsHoliday(DateTime date)
    {
        return IsWeekend(date) || IsProjectHoliday(date);
    }

    private string GetDateHeaderClass(DateTime date)
    {
        var classes = new List<string>();
        
        if (IsToday(date))
        {
            classes.Add("today");
        }
        else if (IsProjectHoliday(date))
        {
            classes.Add("project-holiday");
        }
        else if (date.DayOfWeek == DayOfWeek.Saturday)
        {
            classes.Add("saturday");
        }
        else if (date.DayOfWeek == DayOfWeek.Sunday)
        {
            classes.Add("sunday");
        }
        else if (IsWeekend(date))
        {
            classes.Add("weekend");
        }

        return string.Join(" ", classes);
    }

    private string GetTimelineRowClass()
    {
        return "";
    }
    
    private string GetTimelineColumnClass(DateTime date)
    {
        var classes = new List<string>();
        
        if (IsToday(date))
        {
            classes.Add("today-column");
        }
        else if (IsProjectHoliday(date))
        {
            classes.Add("project-holiday-column");
        }
        else if (date.DayOfWeek == DayOfWeek.Saturday)
        {
            classes.Add("saturday-column");
        }
        else if (date.DayOfWeek == DayOfWeek.Sunday)
        {
            classes.Add("sunday-column");
        }

        return string.Join(" ", classes);
    }
    
    private string GetDateHeaderStyles(DateTime date)
    {
        if (IsProjectHoliday(date))
        {
            return "color: #dc3545; font-weight: bold;";
        }
        else if (date.DayOfWeek == DayOfWeek.Saturday)
        {
            return "color: #007bff; font-weight: bold;";
        }
        else if (date.DayOfWeek == DayOfWeek.Sunday)
        {
            return "color: #dc3545; font-weight: bold;";
        }
        
        return "";
    }
    
    private double GetColumnPosition(DateTime date)
    {
        var index = DateRange.IndexOf(date);
        return index * GetDateCellWidth();
    }

    private double GetTodayPosition()
    {
        var today = DateTime.Today;
        var todayIndex = -1;
        
        switch (currentViewMode)
        {
            case ViewMode.Day:
                todayIndex = DateRange.FindIndex(d => d.Date == today);
                break;
            case ViewMode.Week:
                todayIndex = DateRange.FindIndex(d => GetWeekNumber(d) == GetWeekNumber(today) && d.Year == today.Year);
                break;
            case ViewMode.Month:
                todayIndex = DateRange.FindIndex(d => d.Month == today.Month && d.Year == today.Year);
                break;
        }
        
        return todayIndex >= 0 ? todayIndex * GetDateCellWidth() : 0;
    }

    private List<ProgressSegment> GetProgressSegments(GanttTask task)
    {
        var segments = new List<ProgressSegment>();
        
        // Calculate expected progress based on current date
        var today = DateTime.Today;
        var taskStart = task.Start.Date;
        var taskEnd = task.End.Date;
        var totalDays = (taskEnd - taskStart).TotalDays + 1;
        
        if (totalDays <= 0) 
        {
            // Invalid task duration, show as gray
            segments.Add(new ProgressSegment
            {
                Width = 100,
                Color = "#6c757d",
                Style = "position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: #6c757d; z-index: 1; border-radius: 4px;"
            });
            return segments;
        }
        
        // Calculate expected progress percentage based on today's date
        double expectedProgress = 0;
        if (today >= taskEnd)
        {
            expectedProgress = 100; // Task should be completed
        }
        else if (today >= taskStart)
        {
            var daysElapsed = (today - taskStart).TotalDays + 1;
            expectedProgress = Math.Min(100, (daysElapsed / totalDays) * 100);
        }
        
        var actualProgress = task.Progress;
        var leftPosition = 0.0;
        
        // Segment 1: All completed progress (green) - includes ahead of schedule
        if (actualProgress > 0)
        {
            var isFirst = leftPosition == 0;
            var isLast = leftPosition + actualProgress >= 100;
            var borderRadius = GetSegmentBorderRadius(isFirst, isLast);
            
            segments.Add(new ProgressSegment
            {
                Width = actualProgress,
                Color = "#28a745",
                Style = $"position: absolute; top: 0; left: {leftPosition}%; width: {actualProgress}%; height: 100%; background-color: #28a745; z-index: 1; {borderRadius}"
            });
            leftPosition += actualProgress;
        }
        
        // Segment 2: Behind schedule (red) - should be completed but isn't
        if (expectedProgress > actualProgress)
        {
            var behindWidth = expectedProgress - actualProgress;
            var isFirst = leftPosition == 0;
            var isLast = leftPosition + behindWidth >= 100;
            var borderRadius = GetSegmentBorderRadius(isFirst, isLast);
            
            segments.Add(new ProgressSegment
            {
                Width = behindWidth,
                Color = "#dc3545",
                Style = $"position: absolute; top: 0; left: {leftPosition}%; width: {behindWidth}%; height: 100%; background-color: #dc3545; z-index: 1; {borderRadius}"
            });
            leftPosition += behindWidth;
        }
        
        // Segment 3: Future/Remaining work (gray)
        if (leftPosition < 100)
        {
            var remainingWidth = 100 - leftPosition;
            var isFirst = leftPosition == 0;
            var isLast = true; // Always last segment
            var borderRadius = GetSegmentBorderRadius(isFirst, isLast);
            
            segments.Add(new ProgressSegment
            {
                Width = remainingWidth,
                Color = "#6c757d",
                Style = $"position: absolute; top: 0; left: {leftPosition}%; width: {remainingWidth}%; height: 100%; background-color: #6c757d; z-index: 1; {borderRadius}"
            });
        }
        
        return segments;
    }

    private string GetSegmentBorderRadius(bool isFirst, bool isLast)
    {
        if (isFirst && isLast)
        {
            // Only segment - full border radius
            return "border-radius: 4px;";
        }
        else if (isFirst)
        {
            // First segment - left border radius only
            return "border-radius: 4px 0 0 4px;";
        }
        else if (isLast)
        {
            // Last segment - right border radius only
            return "border-radius: 0 4px 4px 0;";
        }
        else
        {
            // Middle segment - no border radius
            return "border-radius: 0;";
        }
    }

    private bool IsToday(DateTime date)
    {
        var today = DateTime.Today;
        return currentViewMode switch
        {
            ViewMode.Day => date.Date == today,
            ViewMode.Week => GetWeekNumber(date) == GetWeekNumber(today) && date.Year == today.Year,
            ViewMode.Month => date.Month == today.Month && date.Year == today.Year,
            _ => false
        };
    }

    private int GetWeekNumber(DateTime date)
    {
        var jan1 = new DateTime(date.Year, 1, 1);
        var daysOffset = (int)jan1.DayOfWeek;
        var firstWeekDay = jan1.AddDays(-daysOffset + 1);
        var weekDay = ((date - firstWeekDay).Days / 7) + 1;
        return weekDay;
    }

    private double GetDateCellWidth()
    {
        return currentViewMode switch
        {
            ViewMode.Day => 90,     // Increased for dayOfWeek display
            ViewMode.Week => 120,   // Increased for better scroll visibility  
            ViewMode.Month => 150,  // Increased for better scroll visibility
            _ => 90
        };
    }

    private bool IsTaskVisible(GanttTask task)
    {
        // Check if task is visible (parent expanded, etc.)
        if (task.ParentTaskId.HasValue)
        {
            var parent = Tasks.FirstOrDefault(t => t.TaskId == task.ParentTaskId.Value);
            if (parent != null && !IsExpanded(parent))
            {
                return false;
            }
        }
        return true;
    }

    private string GetTaskBarStyle(GanttTask task)
    {
        if (!DateRange.Any()) return "";

        var startDate = DateRange.First();
        var cellWidth = GetDateCellWidth();
        
        var taskStart = task.Start.Date;
        var taskEnd = task.End.Date;
        
        // Calculate position and width based on view mode
        double leftPixels = 0;
        double widthPixels = 60; // minimum width
        
        switch (currentViewMode)
        {
            case ViewMode.Day:
                var daysFromStart = (taskStart - startDate).TotalDays;
                var taskDurationDays = (taskEnd - taskStart).TotalDays + 1;
                leftPixels = daysFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationDays * cellWidth);
                break;
                
            case ViewMode.Week:
                var weeksFromStart = ((taskStart - startDate).TotalDays / 7);
                var taskDurationWeeks = ((taskEnd - taskStart).TotalDays + 1) / 7;
                leftPixels = weeksFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationWeeks * cellWidth);
                break;
                
            case ViewMode.Month:
                var monthsFromStart = GetMonthDifference(startDate, taskStart);
                var taskDurationMonths = GetMonthDifference(taskStart, taskEnd) + 0.1; // Small addition to ensure visibility
                leftPixels = monthsFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationMonths * cellWidth);
                break;
        }
        
        // No background color - segments will handle coloring
        return $"left: {leftPixels}px; width: {widthPixels}px; position: absolute; top: 8px; height: 24px; border-radius: 4px; display: flex; align-items: center; padding: 0 8px; color: white; font-size: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.2); min-width: 60px; overflow: hidden;";
    }
    
    private double GetMonthDifference(DateTime startDate, DateTime endDate)
    {
        return (endDate.Year - startDate.Year) * 12 + endDate.Month - startDate.Month + (endDate.Day - startDate.Day) / 30.0;
    }

    private double GetTotalTimelineWidth()
    {
        return DateRange.Count * GetDateCellWidth();
    }

    private string GetTaskBarClass(GanttTask task)
    {
        return $"task-bar-{task.Priority?.ToLower()} task-bar-{task.Status?.ToLower().Replace(" ", "-")}";
    }

    private string GetTaskBarLabel(GanttTask task)
    {
        var label = task.Name;
        if (label.Length > 20)
        {
            label = label.Substring(0, 17) + "...";
        }
        return label;
    }

    private string GetTaskTooltip(GanttTask task)
    {
        if (!task.HasDates)
        {
            return $"{task.Name}\n日付: 未設定\n進捗: {task.Progress}%\n担当者: {task.AssignedTo ?? "未割り当て"}";
        }
        return $"{task.Name}\n開始: {task.Start:yyyy/MM/dd}\n終了: {task.End:yyyy/MM/dd}\n進捗: {task.Progress}%\n担当者: {task.AssignedTo ?? "未割り当て"}";
    }


    private string GetStatusBadgeColor(string status)
    {
        return status?.ToLower() switch
        {
            "todo" => "secondary",
            "inprogress" => "primary",
            "inreview" => "warning",
            "done" => "success",
            _ => "secondary"
        };
    }
    
    private void ToggleUndatedTasks()
    {
        undatedTasksExpanded = !undatedTasksExpanded;
        SortTasks();
        StateHasChanged();
    }
    
    private async Task HandleRowClick(GanttTask task)
    {
        // Only handle click for actual tasks, not separator
        if (task.TaskId != Guid.Empty && OnTaskClick.HasDelegate)
        {
            await OnTaskClick.InvokeAsync(task);
        }
    }
}

<style>
    .blazor-gantt-container {
        width: 100%;
        max-width: 100%;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
        position: relative;
    }

    .gantt-controls {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
        width: 100%;
        box-sizing: border-box;
    }

    .gantt-wrapper {
        width: 100%;
        max-width: calc(100vw - 300px);
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        position: relative;
        overflow: hidden;
    }

    .gantt-chart-container {
        display: flex;
        flex-direction: column;
        min-height: 400px;
        max-height: 600px;
        width: 100%;
        max-width: 100%;
        position: relative;
        overflow: hidden;
        box-sizing: border-box;
    }

    .gantt-header-row {
        display: flex;
        background-color: #e9ecef;
        border-bottom: 2px solid #dee2e6;
        position: sticky;
        top: 0;
        z-index: 10;
        height: 44px;
        width: 100%;
    }

    .gantt-fixed-header {
        width: 460px;
        min-width: 460px;
        max-width: 460px;
        flex-shrink: 0;
        display: flex;
        background-color: #e9ecef;
        border-right: 1px solid #dee2e6;
    }

    .gantt-scrollable-header {
        flex: 1;
        overflow-x: hidden;
        overflow-y: hidden;
        min-width: 0;
        max-width: calc(100vw - 800px);
    }

    .gantt-content-row {
        display: flex;
        flex: 1;
        min-height: 0;
        width: 100%;
        box-sizing: border-box;
    }

    .gantt-fixed-panel {
        width: 460px;
        min-width: 460px;
        max-width: 460px;
        flex-shrink: 0;
        background-color: #fafafa;
        border-right: 1px solid #dee2e6;
        overflow-y: hidden;
        overflow-x: hidden;
    }

    .gantt-scrollable-panel {
        flex: 1;
        overflow-x: auto;
        overflow-y: auto;
        min-width: 0;
        max-width: calc(100vw - 800px);
    }

    .gantt-header-cell {
        padding: 12px 8px;
        font-weight: 600;
        font-size: 14px;
        border-right: 1px solid #dee2e6;
        box-sizing: border-box;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .gantt-task-list {
        overflow-y: visible;
        will-change: transform;
    }

    .gantt-task-row {
        display: flex;
        height: 40px;
        min-height: 40px;
        max-height: 40px;
        border-bottom: 1px solid #dee2e6;
        align-items: center;
    }

    .gantt-task-row:hover {
        background-color: #f8f9fa;
    }
    
    .gantt-task-row:not(.separator) {
        cursor: pointer;
    }
    
    .gantt-task-row.separator {
        cursor: default;
    }

    .gantt-task-row.child-task {
        background-color: #f8f9fa;
    }

    .gantt-cell {
        padding: 8px;
        border-right: 1px solid #dee2e6;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: flex;
        align-items: center;
        box-sizing: border-box;
        height: 40px;
    }

    .expand-icon {
        cursor: pointer;
        color: #6c757d;
        font-size: 12px;
        z-index: 1;
    }

    .expand-icon:hover {
        color: #007bff;
    }

    .task-name {
        font-weight: 500;
        color: #495057;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 150px;
    }

    .gantt-date-header {
        display: flex;
        background-color: #e9ecef;
        font-weight: 600;
        font-size: 12px;
        height: 44px;
        flex-shrink: 0;
        width: max-content;
        min-width: 100%;
    }

    .date-header-cell {
        padding: 12px 4px;
        border-right: 1px solid #dee2e6;
        text-align: center;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .date-header-cell.today {
        background-color: #28a745;
        color: white;
    }

    .date-header-cell.saturday {
        background-color: #e3f2fd;
        color: #007bff;
        font-weight: bold;
    }

    .date-header-cell.sunday {
        background-color: #ffeaea;
        color: #dc3545;
        font-weight: bold;
    }

    .date-header-cell.project-holiday {
        background-color: #ffeaea;
        color: #dc3545;
        font-weight: bold;
    }

    .date-header-cell.weekend {
        background-color: #f8f9fa;
        color: #6c757d;
    }

    .gantt-timeline-container {
        overflow: visible;
        min-height: 100%;
        position: relative;
        display: flex;
        flex-direction: column;
        width: max-content;
        min-width: 100%;
    }

    .gantt-timeline-content {
        overflow: visible;
        position: relative;
        width: max-content;
        min-width: 100%;
        flex: 1;
    }

    .gantt-timeline-row {
        height: 40px;
        border-bottom: 1px solid #dee2e6;
        position: relative;
        display: flex;
        align-items: center;
    }

    .timeline-column {
        position: absolute;
        top: 0;
        height: 100%;
        z-index: 1;
        pointer-events: none;
    }

    .timeline-column.today-column {
        background-color: rgba(40, 167, 69, 0.1);
    }

    .timeline-column.saturday-column {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .timeline-column.sunday-column {
        background-color: rgba(220, 53, 69, 0.05);
    }

    .timeline-column.project-holiday-column {
        background-color: rgba(220, 53, 69, 0.05);
    }

    .task-bar-container {
        position: relative;
        height: 40px;
        display: flex;
        align-items: center;
        width: max-content;
        min-width: 100%;
    }
    
    .task-bar {
        z-index: 2;
        position: relative;
    }

    .task-progress-segment {
        /* Border radius handled individually by each segment */
    }

    .task-bar-content {
        position: relative;
        z-index: 3;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }


    .progress {
        background-color: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        height: 20px !important;
    }

    .progress-bar {
        transition: width 0.3s ease;
        color: white;
        text-align: center;
        line-height: 20px;
        font-size: 11px;
        font-weight: 500;
    }

    /* Priority-based styling */
    .priority-critical .task-name { color: #dc3545; }
    .priority-high .task-name { color: #fd7e14; }
    .priority-medium .task-name { color: #ffc107; }
    .priority-low .task-name { color: #28a745; }
    
    /* Separator styling */
    .separator-text {
        font-weight: 600;
        color: #6c757d;
        font-style: italic;
        display: inline-block;
        user-select: none;
    }
    
    .separator-text:hover {
        color: #495057;
    }
    
    /* Tasks without dates */
    .task-name.no-dates {
        color: #6c757d;
        font-style: italic;
    }
    
    .gantt-task-row.separator {
        background-color: #e9ecef;
        font-weight: 600;
    }
</style>

<script>
    window.syncGanttScrollPositions = function() {
        const fixedPanel = document.querySelector('.gantt-fixed-panel');
        const scrollablePanel = document.querySelector('.gantt-scrollable-panel');
        const scrollableHeader = document.querySelector('.gantt-scrollable-header');
        const taskList = document.querySelector('.gantt-task-list');
        
        if (fixedPanel && scrollablePanel && taskList) {
            // Remove existing event listeners to prevent duplicates
            scrollablePanel.removeEventListener('scroll', syncScroll);
            
            // Sync vertical scrolling: scrollable panel controls the fixed panel's content
            function syncScroll(e) {
                // Sync vertical scroll by translating the task list
                if (taskList) {
                    taskList.style.transform = `translateY(-${e.target.scrollTop}px)`;
                }
                
                // Sync horizontal scroll with header
                if (scrollableHeader && scrollableHeader.scrollLeft !== e.target.scrollLeft) {
                    scrollableHeader.scrollLeft = e.target.scrollLeft;
                }
            }
            
            scrollablePanel.addEventListener('scroll', syncScroll);
            
            // Sync horizontal scrolling from header to panel
            if (scrollableHeader) {
                scrollableHeader.removeEventListener('scroll', syncHorizontalScrollFromHeader);
                
                function syncHorizontalScrollFromHeader(e) {
                    if (scrollablePanel.scrollLeft !== e.target.scrollLeft) {
                        scrollablePanel.scrollLeft = e.target.scrollLeft;
                    }
                }
                
                scrollableHeader.addEventListener('scroll', syncHorizontalScrollFromHeader);
            }
        }
    };

    window.scrollGanttToPosition = function(position) {
        const scrollablePanel = document.querySelector('.gantt-scrollable-panel');
        const scrollableHeader = document.querySelector('.gantt-scrollable-header');
        
        if (scrollablePanel && scrollableHeader) {
            // Calculate the scroll position to center the today's column
            const containerWidth = scrollablePanel.clientWidth;
            const scrollLeft = Math.max(0, position - containerWidth / 2);
            
            // Scroll both header and panel horizontally
            scrollablePanel.scrollLeft = scrollLeft;
            scrollableHeader.scrollLeft = scrollLeft;
        }
    };
</script>