@using ProjectManagementSystem.WebApp.Wasm.Client.Models
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="blazor-gantt-container">
    <!-- Controls -->
    <div class="gantt-controls mb-3">
        <div class="btn-group" role="group">
            <button type="button" class="btn @(currentViewMode == ViewMode.Day ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode(ViewMode.Day))">
                日
            </button>
            <button type="button" class="btn @(currentViewMode == ViewMode.Week ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode(ViewMode.Week))">
                週
            </button>
            <button type="button" class="btn @(currentViewMode == ViewMode.Month ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => ChangeViewMode(ViewMode.Month))">
                月
            </button>
        </div>
        
        @if (ShowRefreshButton)
        {
            <button type="button" class="btn btn-outline-secondary ms-2" @onclick="RefreshChart">
                <i class="bi bi-arrow-clockwise"></i> 更新
            </button>
        }
    </div>

    <!-- Chart Container -->
    @if (Tasks.Any())
    {
        <div class="gantt-wrapper">
            <div class="gantt-chart-container">
                <!-- Fixed Header Row -->
                <div class="gantt-header-row">
                    <div class="gantt-fixed-header">
                        <div class="gantt-header-cell" style="width: 200px;">タスク名</div>
                        <div class="gantt-header-cell" style="width: 100px;">担当者</div>
                        <div class="gantt-header-cell" style="width: 80px;">ステータス</div>
                        <div class="gantt-header-cell" style="width: 80px;">進捗</div>
                    </div>
                    <div class="gantt-scrollable-header">
                        <div class="gantt-date-header">
                            @foreach (var date in DateRange)
                            {
                                <div class="date-header-cell @(IsToday(date) ? "today" : "")" 
                                     style="width: @(GetDateCellWidth())px;">
                                    @FormatDateHeader(date)
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <!-- Scrollable Content Row -->
                <div class="gantt-content-row">
                    <div class="gantt-fixed-panel">
                        <div class="gantt-task-list">
                            @foreach (var task in SortedTasks)
                            {
                                @if (IsTaskVisible(task))
                                {
                                    <div class="gantt-task-row @(GetTaskCssClass(task))">
                                        <div class="gantt-cell" style="width: 200px; padding-left: @(GetIndentLevel(task) * 20 + 12)px;">
                                            @if (HasChildren(task))
                                            {
                                                <i class="bi @(IsExpanded(task) ? "bi-chevron-down" : "bi-chevron-right") me-1 expand-icon" 
                                                   @onclick="@(() => ToggleExpand(task))"></i>
                                            }
                                            else
                                            {
                                                <span class="me-3"></span>
                                            }
                                            <span class="task-name" title="@task.Name">@task.Name</span>
                                        </div>
                                        <div class="gantt-cell" style="width: 100px;">
                                            @task.AssignedTo
                                        </div>
                                        <div class="gantt-cell" style="width: 80px;">
                                            <span class="badge bg-@GetStatusBadgeColor(task.Status)">@task.Status</span>
                                        </div>
                                        <div class="gantt-cell" style="width: 80px;">
                                            <div class="progress" style="height: 20px;">
                                                <div class="progress-bar" style="width: @(task.Progress)%; background-color: @GetTaskColor(task.Priority);">
                                                    @(task.Progress)%
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- Scrollable Timeline Panel -->
                    <div class="gantt-scrollable-panel">
                        <div class="gantt-timeline-container">
                            <!-- Task Bars -->
                            <div class="gantt-timeline-content">
                                @foreach (var task in SortedTasks)
                                {
                                    @if (IsTaskVisible(task))
                                    {
                                        <div class="gantt-timeline-row">
                                            <div class="task-bar-container" style="width: @(GetTotalTimelineWidth())px;">
                                                <div class="task-bar @GetTaskBarClass(task)" 
                                                     style="@GetTaskBarStyle(task)"
                                                     title="@GetTaskTooltip(task)"
                                                     @onclick="@(() => OnTaskClick.InvokeAsync(task))">
                                                    <div class="task-bar-content">
                                                        <span class="task-bar-name">@GetTaskBarLabel(task)</span>
                                                    </div>
                                                    @if (task.Progress > 0)
                                                    {
                                                        <div class="task-progress-overlay" style="width: @(task.Progress)%;"></div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-4">
            <i class="bi bi-bar-chart" style="font-size: 2rem; color: #6c757d;"></i>
            <h6 class="mt-2">タスクがありません</h6>
            <p class="text-muted small">タスクを作成してガントチャートを表示してください。</p>
        </div>
    }
</div>

@code {
    [Parameter] public List<GanttTask> Tasks { get; set; } = new();
    [Parameter] public EventCallback<GanttTask> OnTaskClick { get; set; }
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public bool ReadOnly { get; set; } = false;

    public enum ViewMode { Day, Week, Month }

    private ViewMode currentViewMode = ViewMode.Week;
    private List<DateTime> DateRange = new();
    private List<GanttTask> SortedTasks = new();
    private Dictionary<string, bool> expandedTasks = new();
    private const int TaskRowHeight = 40;
    private const int DateCellWidth = 50;

    protected override void OnParametersSet()
    {
        CalculateDateRange();
        SortTasks();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SyncScrollPositions();
        }
    }

    private async Task SyncScrollPositions()
    {
        await JSRuntime.InvokeVoidAsync("syncGanttScrollPositions");
    }

    private void ChangeViewMode(ViewMode mode)
    {
        currentViewMode = mode;
        CalculateDateRange();
        StateHasChanged();
    }

    public void RefreshChart()
    {
        CalculateDateRange();
        SortTasks();
        StateHasChanged();
    }

    private void CalculateDateRange()
    {
        if (!Tasks.Any()) 
        {
            // If no tasks, create a default range for current month
            var today = DateTime.Today;
            DateRange.Clear();
            
            switch (currentViewMode)
            {
                case ViewMode.Day:
                    for (int i = -15; i <= 15; i++)
                    {
                        DateRange.Add(today.AddDays(i));
                    }
                    break;
                case ViewMode.Week:
                    var startOfWeek = today.AddDays(-(int)today.DayOfWeek + 1);
                    for (int i = -4; i <= 8; i++)
                    {
                        DateRange.Add(startOfWeek.AddDays(i * 7));
                    }
                    break;
                case ViewMode.Month:
                    var startOfMonth = new DateTime(today.Year, today.Month, 1);
                    for (int i = -3; i <= 9; i++)
                    {
                        DateRange.Add(startOfMonth.AddMonths(i));
                    }
                    break;
            }
            return;
        }

        var minDate = Tasks.Min(t => t.Start).Date;
        var maxDate = Tasks.Max(t => t.End).Date;

        DateRange.Clear();
        var current = minDate;

        switch (currentViewMode)
        {
            case ViewMode.Day:
                // Add more padding for day view to ensure scrolling
                minDate = minDate.AddDays(-10);
                maxDate = maxDate.AddDays(10);
                current = minDate;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddDays(1);
                }
                break;
            case ViewMode.Week:
                // Add more padding for week view
                minDate = minDate.AddDays(-21); // 3 weeks before
                maxDate = maxDate.AddDays(21);  // 3 weeks after
                var startOfWeek = minDate.AddDays(-(int)minDate.DayOfWeek + 1);
                current = startOfWeek;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddDays(7);
                }
                break;
            case ViewMode.Month:
                // Add padding for month view
                minDate = minDate.AddMonths(-2);
                maxDate = maxDate.AddMonths(2);
                var startOfMonth = new DateTime(minDate.Year, minDate.Month, 1);
                current = startOfMonth;
                while (current <= maxDate)
                {
                    DateRange.Add(current);
                    current = current.AddMonths(1);
                }
                break;
        }
    }

    private void SortTasks()
    {
        var taskDict = Tasks.ToDictionary(t => t.TaskId);
        var processed = new HashSet<Guid>();
        SortedTasks.Clear();

        // Process parent tasks first
        foreach (var task in Tasks.Where(t => t.ParentTaskId == null))
        {
            AddTaskWithChildren(task, taskDict, processed);
        }

        // Add remaining orphaned tasks
        foreach (var task in Tasks.Where(t => !processed.Contains(t.TaskId)))
        {
            SortedTasks.Add(task);
        }
    }

    private void AddTaskWithChildren(GanttTask task, Dictionary<Guid, GanttTask> taskDict, HashSet<Guid> processed)
    {
        if (processed.Contains(task.TaskId)) return;

        SortedTasks.Add(task);
        processed.Add(task.TaskId);

        // Add children if parent is expanded
        if (IsExpanded(task))
        {
            var children = Tasks.Where(t => t.ParentTaskId == task.TaskId).ToList();
            foreach (var child in children)
            {
                AddTaskWithChildren(child, taskDict, processed);
            }
        }
    }

    private int GetIndentLevel(GanttTask task)
    {
        var level = 0;
        var current = task;
        
        while (current.ParentTaskId.HasValue)
        {
            level++;
            current = Tasks.FirstOrDefault(t => t.TaskId == current.ParentTaskId.Value);
            if (current == null) break;
        }
        
        return level;
    }

    private bool HasChildren(GanttTask task)
    {
        return Tasks.Any(t => t.ParentTaskId == task.TaskId);
    }

    private bool IsExpanded(GanttTask task)
    {
        return expandedTasks.GetValueOrDefault(task.Id, true);
    }

    private void ToggleExpand(GanttTask task)
    {
        expandedTasks[task.Id] = !IsExpanded(task);
        SortTasks();
        StateHasChanged();
    }

    private string GetTaskCssClass(GanttTask task)
    {
        var classes = new List<string>();
        
        if (task.ParentTaskId.HasValue)
        {
            classes.Add("child-task");
        }
        else
        {
            classes.Add("parent-task");
        }

        classes.Add($"priority-{task.Priority?.ToLower()}");
        classes.Add($"status-{task.Status?.ToLower().Replace(" ", "-")}");

        return string.Join(" ", classes);
    }

    private string FormatDateHeader(DateTime date)
    {
        return currentViewMode switch
        {
            ViewMode.Day => date.ToString("M/d"),
            ViewMode.Week => $"Week {GetWeekNumber(date)}",
            ViewMode.Month => date.ToString("MMM yyyy"),
            _ => date.ToString("M/d")
        };
    }

    private bool IsToday(DateTime date)
    {
        var today = DateTime.Today;
        return currentViewMode switch
        {
            ViewMode.Day => date.Date == today,
            ViewMode.Week => GetWeekNumber(date) == GetWeekNumber(today) && date.Year == today.Year,
            ViewMode.Month => date.Month == today.Month && date.Year == today.Year,
            _ => false
        };
    }

    private int GetWeekNumber(DateTime date)
    {
        var jan1 = new DateTime(date.Year, 1, 1);
        var daysOffset = (int)jan1.DayOfWeek;
        var firstWeekDay = jan1.AddDays(-daysOffset + 1);
        var weekDay = ((date - firstWeekDay).Days / 7) + 1;
        return weekDay;
    }

    private double GetDateCellWidth()
    {
        return currentViewMode switch
        {
            ViewMode.Day => 80,     // Increased for better scroll visibility
            ViewMode.Week => 120,   // Increased for better scroll visibility  
            ViewMode.Month => 150,  // Increased for better scroll visibility
            _ => 80
        };
    }

    private bool IsTaskVisible(GanttTask task)
    {
        // Check if task is visible (parent expanded, etc.)
        if (task.ParentTaskId.HasValue)
        {
            var parent = Tasks.FirstOrDefault(t => t.TaskId == task.ParentTaskId.Value);
            if (parent != null && !IsExpanded(parent))
            {
                return false;
            }
        }
        return true;
    }

    private string GetTaskBarStyle(GanttTask task)
    {
        if (!DateRange.Any()) return "";

        var startDate = DateRange.First();
        var cellWidth = GetDateCellWidth();
        
        var taskStart = task.Start.Date;
        var taskEnd = task.End.Date;
        
        // Calculate position and width based on view mode
        double leftPixels = 0;
        double widthPixels = 60; // minimum width
        
        switch (currentViewMode)
        {
            case ViewMode.Day:
                var daysFromStart = (taskStart - startDate).TotalDays;
                var taskDurationDays = (taskEnd - taskStart).TotalDays + 1;
                leftPixels = daysFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationDays * cellWidth);
                break;
                
            case ViewMode.Week:
                var weeksFromStart = ((taskStart - startDate).TotalDays / 7);
                var taskDurationWeeks = ((taskEnd - taskStart).TotalDays + 1) / 7;
                leftPixels = weeksFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationWeeks * cellWidth);
                break;
                
            case ViewMode.Month:
                var monthsFromStart = GetMonthDifference(startDate, taskStart);
                var taskDurationMonths = GetMonthDifference(taskStart, taskEnd) + 0.1; // Small addition to ensure visibility
                leftPixels = monthsFromStart * cellWidth;
                widthPixels = Math.Max(60, taskDurationMonths * cellWidth);
                break;
        }
        
        var backgroundColor = GetTaskColor(task.Priority);
        
        return $"left: {leftPixels}px; width: {widthPixels}px; background-color: {backgroundColor}; position: absolute; top: 8px; height: 24px; border-radius: 4px; display: flex; align-items: center; padding: 0 8px; color: white; font-size: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.2); min-width: 60px;";
    }
    
    private double GetMonthDifference(DateTime startDate, DateTime endDate)
    {
        return (endDate.Year - startDate.Year) * 12 + endDate.Month - startDate.Month + (endDate.Day - startDate.Day) / 30.0;
    }

    private double GetTotalTimelineWidth()
    {
        return DateRange.Count * GetDateCellWidth();
    }

    private string GetTaskBarClass(GanttTask task)
    {
        return $"task-bar-{task.Priority?.ToLower()} task-bar-{task.Status?.ToLower().Replace(" ", "-")}";
    }

    private string GetTaskBarLabel(GanttTask task)
    {
        var label = task.Name;
        if (label.Length > 20)
        {
            label = label.Substring(0, 17) + "...";
        }
        return label;
    }

    private string GetTaskTooltip(GanttTask task)
    {
        return $"{task.Name}\n開始: {task.Start:yyyy/MM/dd}\n終了: {task.End:yyyy/MM/dd}\n進捗: {task.Progress}%\n担当者: {task.AssignedTo ?? "未割り当て"}";
    }

    private string GetTaskColor(string priority)
    {
        return priority?.ToLower() switch
        {
            "low" => "#28a745",     // Green
            "medium" => "#ffc107",  // Yellow
            "high" => "#fd7e14",    // Orange
            "critical" => "#dc3545", // Red
            _ => "#6c757d"          // Gray
        };
    }

    private string GetStatusBadgeColor(string status)
    {
        return status?.ToLower() switch
        {
            "todo" => "secondary",
            "inprogress" => "primary",
            "inreview" => "warning",
            "done" => "success",
            _ => "secondary"
        };
    }
}

<style>
    .blazor-gantt-container {
        width: 100%;
        max-width: 100%;
        background: white;
        box-sizing: border-box;
        overflow: hidden;
        position: relative;
    }

    .gantt-controls {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
        width: 100%;
        box-sizing: border-box;
    }

    .gantt-wrapper {
        width: 100%;
        max-width: calc(100vw - 300px);
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        position: relative;
        overflow: hidden;
    }

    .gantt-chart-container {
        display: flex;
        flex-direction: column;
        min-height: 400px;
        max-height: 600px;
        width: 100%;
        max-width: 100%;
        position: relative;
        overflow: hidden;
        box-sizing: border-box;
    }

    .gantt-header-row {
        display: flex;
        background-color: #e9ecef;
        border-bottom: 2px solid #dee2e6;
        position: sticky;
        top: 0;
        z-index: 10;
        height: 44px;
        width: 100%;
    }

    .gantt-fixed-header {
        width: 460px;
        min-width: 460px;
        max-width: 460px;
        flex-shrink: 0;
        display: flex;
        background-color: #e9ecef;
        border-right: 1px solid #dee2e6;
    }

    .gantt-scrollable-header {
        flex: 1;
        overflow-x: hidden;
        overflow-y: hidden;
        min-width: 0;
        max-width: calc(100vw - 800px);
    }

    .gantt-content-row {
        display: flex;
        flex: 1;
        min-height: 0;
        width: 100%;
        box-sizing: border-box;
    }

    .gantt-fixed-panel {
        width: 460px;
        min-width: 460px;
        max-width: 460px;
        flex-shrink: 0;
        background-color: #fafafa;
        border-right: 1px solid #dee2e6;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .gantt-scrollable-panel {
        flex: 1;
        overflow-x: auto;
        overflow-y: auto;
        min-width: 0;
        max-width: calc(100vw - 800px);
    }

    .gantt-header-cell {
        padding: 12px 8px;
        font-weight: 600;
        font-size: 14px;
        border-right: 1px solid #dee2e6;
        box-sizing: border-box;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .gantt-task-list {
        overflow-y: visible;
    }

    .gantt-task-row {
        display: flex;
        height: 40px;
        min-height: 40px;
        max-height: 40px;
        border-bottom: 1px solid #dee2e6;
        align-items: center;
    }

    .gantt-task-row:hover {
        background-color: #f8f9fa;
    }

    .gantt-task-row.child-task {
        background-color: #f8f9fa;
    }

    .gantt-cell {
        padding: 8px;
        border-right: 1px solid #dee2e6;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: flex;
        align-items: center;
        box-sizing: border-box;
        height: 40px;
    }

    .expand-icon {
        cursor: pointer;
        color: #6c757d;
        font-size: 12px;
    }

    .expand-icon:hover {
        color: #007bff;
    }

    .task-name {
        font-weight: 500;
        color: #495057;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 150px;
    }

    .gantt-date-header {
        display: flex;
        background-color: #e9ecef;
        font-weight: 600;
        font-size: 12px;
        height: 44px;
        flex-shrink: 0;
        width: max-content;
        min-width: 100%;
    }

    .date-header-cell {
        padding: 12px 4px;
        border-right: 1px solid #dee2e6;
        text-align: center;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .date-header-cell.today {
        background-color: #007bff;
        color: white;
    }

    .gantt-timeline-container {
        overflow: visible;
        min-height: 100%;
        position: relative;
        display: flex;
        flex-direction: column;
        width: max-content;
        min-width: 100%;
    }

    .gantt-timeline-content {
        overflow: visible;
        position: relative;
        width: max-content;
        min-width: 100%;
        flex: 1;
    }

    .gantt-timeline-row {
        height: 40px;
        border-bottom: 1px solid #dee2e6;
        position: relative;
        display: flex;
        align-items: center;
    }

    .task-bar-container {
        position: relative;
        height: 40px;
        display: flex;
        align-items: center;
        width: max-content;
        min-width: 100%;
    }

    .task-progress-overlay {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        pointer-events: none;
    }

    .progress {
        background-color: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        height: 20px !important;
    }

    .progress-bar {
        transition: width 0.3s ease;
        color: white;
        text-align: center;
        line-height: 20px;
        font-size: 11px;
        font-weight: 500;
    }

    /* Priority-based styling */
    .priority-critical .task-name { color: #dc3545; }
    .priority-high .task-name { color: #fd7e14; }
    .priority-medium .task-name { color: #ffc107; }
    .priority-low .task-name { color: #28a745; }
</style>

<script>
    window.syncGanttScrollPositions = function() {
        const fixedPanel = document.querySelector('.gantt-fixed-panel');
        const scrollablePanel = document.querySelector('.gantt-scrollable-panel');
        const scrollableHeader = document.querySelector('.gantt-scrollable-header');
        
        if (fixedPanel && scrollablePanel) {
            // Remove existing event listeners to prevent duplicates
            fixedPanel.removeEventListener('scroll', syncVerticalScroll);
            scrollablePanel.removeEventListener('scroll', syncVerticalScroll);
            
            // Sync vertical scrolling between fixed panel and scrollable panel
            function syncVerticalScroll(e) {
                const target = e.target;
                if (target === fixedPanel && scrollablePanel.scrollTop !== target.scrollTop) {
                    scrollablePanel.scrollTop = target.scrollTop;
                } else if (target === scrollablePanel && fixedPanel.scrollTop !== target.scrollTop) {
                    fixedPanel.scrollTop = target.scrollTop;
                }
            }
            
            fixedPanel.addEventListener('scroll', syncVerticalScroll);
            scrollablePanel.addEventListener('scroll', syncVerticalScroll);
            
            // Sync horizontal scrolling between scrollable header and scrollable panel
            if (scrollableHeader) {
                scrollablePanel.removeEventListener('scroll', syncHorizontalScrollFromPanel);
                scrollableHeader.removeEventListener('scroll', syncHorizontalScrollFromHeader);
                
                function syncHorizontalScrollFromPanel(e) {
                    if (scrollableHeader.scrollLeft !== e.target.scrollLeft) {
                        scrollableHeader.scrollLeft = e.target.scrollLeft;
                    }
                }
                
                function syncHorizontalScrollFromHeader(e) {
                    if (scrollablePanel.scrollLeft !== e.target.scrollLeft) {
                        scrollablePanel.scrollLeft = e.target.scrollLeft;
                    }
                }
                
                scrollablePanel.addEventListener('scroll', syncHorizontalScrollFromPanel);
                scrollableHeader.addEventListener('scroll', syncHorizontalScrollFromHeader);
            }
        }
    };
</script>