@page "/users/{id:int}"
@using ProjectManagementSystem.Shared.Client.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Client.Constants
@using ProjectManagementSystem.Shared.Client.Authentication

@attribute [ProjectManagementSystem.WebApp.Wasm.Client.Components.Authentication.Authorize]
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<UserDetail> Logger

<PageTitle>User Details - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>User Details</h2>
                    <p class="text-muted mb-2">View user information and perform management actions</p>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item">
                                <a href="/users" class="text-decoration-none">Users</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">Details</li>
                        </ol>
                    </nav>
                </div>
                <button class="btn btn-outline-secondary" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i> Back to Users
                </button>
            </div>

            <!-- Check if user is authenticated and SystemAdmin -->
            @if (!isAuthenticated)
            {
                <div class="alert alert-warning">
                    <i class="bi bi-info-circle"></i>
                    <strong>Please Login:</strong> You need to be logged in to access this page.
                </div>
            }
            else if (!isSystemAdmin)
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Access Denied:</strong> You don't have permission to view user details.
                </div>
            }
            else if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading user information...</p>
                </div>
            }
            else if (currentUser == null)
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>User Not Found:</strong> The requested user could not be found.
                    <div class="mt-2">
                        <button class="btn btn-primary" @onclick="GoBack">
                            <i class="bi bi-arrow-left"></i> Back to Users
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <!-- User Information Card -->
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-person-circle"></i> @currentUser.Username
                                </h5>
                                <span class="badge bg-@(currentUser.IsActive ? "success" : "secondary") fs-6">
                                    @(currentUser.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Full Name</label>
                                        <p class="form-control-plaintext">@($"{currentUser.FirstName} {currentUser.LastName}")</p>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Email Address</label>
                                        <p class="form-control-plaintext">
                                            <a href="mailto:@currentUser.Email" class="text-decoration-none">@currentUser.Email</a>
                                        </p>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Username</label>
                                        <p class="form-control-plaintext">@currentUser.Username</p>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Role</label>
                                        <p class="form-control-plaintext">
                                            <span class="badge bg-@GetRoleBadgeColor(currentUser.Role) fs-6">@currentUser.Role</span>
                                        </p>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Account Created</label>
                                        <p class="form-control-plaintext">@currentUser.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")</p>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Last Login</label>
                                        <p class="form-control-plaintext">
                                            @if (currentUser.LastLoginAt.HasValue)
                                            {
                                                @currentUser.LastLoginAt.Value.ToString("MMMM dd, yyyy 'at' HH:mm")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Never logged in</span>
                                            }
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Actions Card -->
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-gear"></i> Actions
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-primary" @onclick="() => EditUser(currentUser.Id)">
                                        <i class="bi bi-pencil"></i> Edit User
                                    </button>
                                    
                                    <button class="btn btn-outline-info" @onclick="() => ShowChangePasswordModal()">
                                        <i class="bi bi-key"></i> Change Password
                                    </button>
                                    
                                    <button class="btn btn-outline-@(currentUser.IsActive ? "warning" : "success")" 
                                            @onclick="() => ToggleUserStatus(currentUser.Id, !currentUser.IsActive)">
                                        <i class="bi bi-@(currentUser.IsActive ? "person-dash" : "person-check")"></i>
                                        @(currentUser.IsActive ? "Deactivate" : "Activate") User
                                    </button>
                                    
                                    @if (!isSelfEdit)
                                    {
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteUser(currentUser.Id)">
                                            <i class="bi bi-trash"></i> Delete User
                                        </button>
                                    }
                                    else
                                    {
                                        <div class="alert alert-info p-2 mb-0">
                                            <small>
                                                <i class="bi bi-info-circle"></i>
                                                You cannot delete your own account
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Additional Information Card -->
                        <div class="card mt-3">
                            <div class="card-header">
                                <h6 class="card-title mb-0">
                                    <i class="bi bi-info-circle"></i> Additional Information
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <small class="text-muted">User ID:</small>
                                    <br>
                                    <code>@currentUser.Id</code>
                                </div>
                                
                                <div class="mb-2">
                                    <small class="text-muted">Account Status:</small>
                                    <br>
                                    <span class="badge bg-@(currentUser.IsActive ? "success" : "secondary")">
                                        @(currentUser.IsActive ? "Active" : "Inactive")
                                    </span>
                                </div>

                                <div class="mb-2">
                                    <small class="text-muted">Permission Level:</small>
                                    <br>
                                    @GetRoleDescription(currentUser.Role)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Change Password Modal -->
<div class="modal fade @(showPasswordModal ? "show" : "")" style="display: @(showPasswordModal ? "block" : "none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-key"></i> Change Password
                </h5>
                <button type="button" class="btn-close" @onclick="ClosePasswordModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@changePasswordRequest" OnValidSubmit="@HandleChangePassword" FormName="ChangePasswordForm">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(passwordErrorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i>
                            @passwordErrorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(passwordSuccessMessage))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle"></i>
                            @passwordSuccessMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <InputText id="newPassword" @bind-Value="changePasswordRequest.NewPassword" 
                                      class="form-control" placeholder="Enter new password" 
                                      type="@(showNewPassword ? "text" : "password")" />
                            <button class="btn btn-outline-secondary" type="button" 
                                    @onclick="ToggleNewPasswordVisibility">
                                <i class="bi bi-@(showNewPassword ? "eye-slash" : "eye")"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" class="text-danger" />
                        <div class="form-text">Password must be at least 8 characters with uppercase, lowercase, digit, and special character.</div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input id="confirmPassword" @bind="confirmNewPassword" 
                                   class="form-control" placeholder="Confirm new password" 
                                   type="@(showConfirmPassword ? "text" : "password")" />
                            <button class="btn btn-outline-secondary" type="button" 
                                    @onclick="ToggleConfirmPasswordVisibility">
                                <i class="bi bi-@(showConfirmPassword ? "eye-slash" : "eye")"></i>
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(changePasswordRequest.NewPassword) && !string.IsNullOrEmpty(confirmNewPassword) && changePasswordRequest.NewPassword != confirmNewPassword)
                        {
                            <div class="text-danger">Passwords do not match.</div>
                        }
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="ClosePasswordModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="HandleChangePassword" disabled="@(isChangingPassword || !IsPasswordFormValid())">
                    @if (isChangingPassword)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    <i class="bi bi-key"></i> Change Password
                </button>
            </div>
        </div>
    </div>
</div>

@if (showPasswordModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private UserDto? currentUser;
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool isSystemAdmin = false;
    private bool isSelfEdit = false;
    private int currentUserId = 0;
    
    // Password change modal related variables
    private bool showPasswordModal = false;
    private ChangePasswordRequest changePasswordRequest = new() { NewPassword = string.Empty };
    private string confirmNewPassword = string.Empty;
    private string passwordErrorMessage = string.Empty;
    private string passwordSuccessMessage = string.Empty;
    private bool isChangingPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserPermissions();
        if (isAuthenticated && isSystemAdmin)
        {
            await LoadUser();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task CheckUserPermissions()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            var userRole = authState.User.FindFirst("Role")?.Value 
                        ?? authState.User.FindFirst("role")?.Value
                        ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            isSystemAdmin = userRole == Roles.SystemAdmin;
            
            var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(userIdClaim, out currentUserId))
            {
                isSelfEdit = currentUserId == Id;
            }
        }
    }

    private async Task LoadUser()
    {
        try
        {
            isLoading = true;
            currentUser = await UserService.GetUserByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetRoleBadgeColor(string role)
    {
        return role switch
        {
            Roles.SystemAdmin => "danger",
            Roles.OrganizationMember => "success",
            _ => "secondary" // Only global roles should appear in user management
        };
    }

    private string GetRoleDescription(string role)
    {
        return role switch
        {
            Roles.SystemAdmin => "Full system administration privileges",
            Roles.OrganizationMember => "Standard user with basic system access",
            _ => "Standard user privileges" // Only global roles should appear in user management
        };
    }

    private void EditUser(int userId)
    {
        Navigation.NavigateTo($"/users/{userId}/edit", forceLoad: true);
    }

    private async Task ToggleUserStatus(int userId, bool newStatus)
    {
        var action = newStatus ? "activate" : "deactivate";
        if (await JSInterop.InvokeAsync<bool>("confirm", $"Are you sure you want to {action} this user?"))
        {
            var success = await UserService.ChangeUserStatusAsync(userId, newStatus);
            if (success)
            {
                if (currentUser != null)
                {
                    currentUser.IsActive = newStatus;
                    StateHasChanged();
                }
            }
            else
            {
                var errorMessage = UserService.GetLastError() ?? $"Failed to {action} user";
                await JSInterop.InvokeVoidAsync("alert", errorMessage);
            }
        }
    }

    private async Task DeleteUser(int userId)
    {
        if (await JSInterop.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This action cannot be undone."))
        {
            var success = await UserService.DeleteUserAsync(userId);
            if (success)
            {
                Navigation.NavigateTo("/users", forceLoad: true);
            }
            else
            {
                var errorMessage = UserService.GetLastError() ?? "Failed to delete user";
                await JSInterop.InvokeVoidAsync("alert", errorMessage);
            }
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/users", forceLoad: true);
    }

    // Password change modal methods
    private void ShowChangePasswordModal()
    {
        showPasswordModal = true;
        changePasswordRequest = new() { NewPassword = string.Empty };
        confirmNewPassword = string.Empty;
        passwordErrorMessage = string.Empty;
        passwordSuccessMessage = string.Empty;
        showNewPassword = false;
        showConfirmPassword = false;
        StateHasChanged();
    }

    private void ClosePasswordModal()
    {
        showPasswordModal = false;
        StateHasChanged();
    }

    private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private bool IsPasswordFormValid()
    {
        return !string.IsNullOrWhiteSpace(changePasswordRequest.NewPassword) &&
               !string.IsNullOrWhiteSpace(confirmNewPassword) &&
               changePasswordRequest.NewPassword == confirmNewPassword &&
               changePasswordRequest.NewPassword.Length >= 8;
    }

    private async Task HandleChangePassword()
    {
        try
        {
            isChangingPassword = true;
            passwordErrorMessage = string.Empty;
            passwordSuccessMessage = string.Empty;
            StateHasChanged();

            // Validate passwords match
            if (changePasswordRequest.NewPassword != confirmNewPassword)
            {
                passwordErrorMessage = "Passwords do not match.";
                return;
            }

            // Validate password strength
            if (!IsPasswordValid(changePasswordRequest.NewPassword))
            {
                passwordErrorMessage = "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character.";
                return;
            }

            var success = await UserService.ChangePasswordAsync(Id, changePasswordRequest);
            if (success)
            {
                passwordSuccessMessage = "Password changed successfully!";
                
                // Auto-close modal after success
                await Task.Delay(1500);
                ClosePasswordModal();
            }
            else
            {
                var error = UserService.GetLastError();
                passwordErrorMessage = error ?? "Failed to change password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            passwordErrorMessage = $"An unexpected error occurred: {ex.Message}";
            Logger.LogError(ex, "Error changing password");
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private bool IsPasswordValid(string password)
    {
        if (string.IsNullOrWhiteSpace(password) || password.Length < 8)
            return false;

        var hasUppercase = password.Any(char.IsUpper);
        var hasLowercase = password.Any(char.IsLower);
        var hasDigit = password.Any(char.IsDigit);
        var hasSpecialChar = password.Any(ch => !char.IsLetterOrDigit(ch));

        return hasUppercase && hasLowercase && hasDigit && hasSpecialChar;
    }
}