@page "/organizations"
@using Microsoft.AspNetCore.Authorization
@using ProjectManagementSystem.Shared.Client.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Models
@using ProjectManagementSystem.Shared.Models.Common

@attribute [ProjectManagementSystem.WebApp.Wasm.Client.Components.Authentication.Authorize]
@inject IOrganizationService OrganizationService
@inject NavigationManager Navigation
@inject IJSRuntime JSInterop
@inject ILogger<Organizations> Logger

<PageTitle>Organizations - Project Management System</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Organizations</h2>
                <button class="btn btn-primary" @onclick="NavigateToCreate">
                    <i class="bi bi-plus-circle"></i> Create Organization
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (hasError)
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-exclamation-triangle" style="font-size: 3rem; color: #dc3545;"></i>
                        <h5 class="mt-3 text-danger">Error Loading Organizations</h5>
                        <p class="text-muted">@errorMessage</p>
                        <button class="btn btn-primary" @onclick="() => LoadOrganizations()">
                            <i class="bi bi-arrow-clockwise"></i> Try Again
                        </button>
                    </div>
                </div>
            }
            else if (organizations?.Items?.Any() == true)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Created Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var org in organizations.Items)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@org.Name</strong>
                                            </td>
                                            <td>@org.Description</td>
                                            <td>@org.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="() => ViewOrganization(org.Id)">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1" 
                                                        @onclick="() => EditOrganization(org.Id)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteOrganization(org.Id)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (organizations.TotalPages > 1)
                        {
                            <nav aria-label="Organizations pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(organizations.PageNumber <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="@(async () => await HandlePageClick(organizations.PageNumber - 1))" disabled="@(organizations.PageNumber <= 1)">
                                            Previous
                                        </button>
                                    </li>
                                    
                                    @{
                                        var startPage = Math.Max(1, organizations.PageNumber - 2);
                                        var endPage = Math.Min(organizations.TotalPages, organizations.PageNumber + 2);
                                    }
                                    @for (int i = startPage; i <= endPage; i++)
                                    {
                                        var pageNum = i;
                                        <li class="page-item @(pageNum == organizations.PageNumber ? "active" : "")" @key="pageNum">
                                            <button class="page-link" @onclick="@(async () => await HandlePageClick(pageNum))" disabled="@(pageNum > organizations.TotalPages)">@pageNum</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(organizations.PageNumber >= organizations.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="@(async () => await HandlePageClick(organizations.PageNumber + 1))" disabled="@(organizations.PageNumber >= organizations.TotalPages)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-building" style="font-size: 3rem; color: #6c757d;"></i>
                        <h5 class="mt-3">No organizations found</h5>
                        <p class="text-muted">Get started by creating your first organization.</p>
                        <button class="btn btn-primary" @onclick="NavigateToCreate">
                            <i class="bi bi-plus-circle"></i> Create Organization
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ProjectManagementSystem.Shared.Models.Common.PagedResult<OrganizationDto>? organizations;
    private bool isLoading = true;
    private string? errorMessage;
    private bool hasError = false;
    private int currentPage = 1;
    private int currentPageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Organizations component initialized (WebAssembly)");
        await LoadOrganizations();
    }

    private async Task LoadOrganizations(int pageNumber = 1)
    {
        isLoading = true;
        hasError = false;
        errorMessage = null;
        
        try
        {
            Logger.LogInformation("Loading organizations, page {PageNumber}", pageNumber);
            currentPage = pageNumber;
            var result = await OrganizationService.GetOrganizationsAsync(pageNumber, currentPageSize);
            
            if (result == null)
            {
                hasError = true;
                errorMessage = "Failed to load organizations. Please check your connection and try again.";
                Logger.LogWarning("Organizations service returned null result");
                organizations = null;
            }
            else
            {
                organizations = result;
                Logger.LogInformation("Successfully loaded {Count} organizations. TotalCount: {TotalCount}, TotalPages: {TotalPages}, CurrentPage: {CurrentPage}", 
                    organizations.Items?.Count() ?? 0, organizations.TotalCount, organizations.TotalPages, organizations.PageNumber);
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"An error occurred while loading organizations: {ex.Message}";
            Logger.LogError(ex, "Error loading organizations");
            organizations = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPage(int pageNumber)
    {
        if (organizations != null && pageNumber > organizations.TotalPages)
        {
            Logger.LogWarning("Attempted to load invalid page {PageNumber}. TotalPages: {TotalPages}", pageNumber, organizations.TotalPages);
            return;
        }
        
        if (pageNumber < 1)
        {
            Logger.LogWarning("Attempted to load invalid page {PageNumber}. Minimum page is 1", pageNumber);
            return;
        }
        
        await LoadOrganizations(pageNumber);
    }

    private async Task HandlePageClick(int pageNumber)
    {
        Logger.LogInformation("Page click requested for page {PageNumber}", pageNumber);
        await LoadPage(pageNumber);
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/organizations/create");
    }

    private void ViewOrganization(Guid id)
    {
        Navigation.NavigateTo($"/organizations/{id}");
    }

    private void EditOrganization(Guid id)
    {
        Navigation.NavigateTo($"/organizations/{id}/edit");
    }

    private async Task DeleteOrganization(Guid id)
    {
        try
        {
            if (await JSInterop.InvokeAsync<bool>("confirm", "Are you sure you want to delete this organization?"))
            {
                Logger.LogInformation("Attempting to delete organization {OrganizationId}", id);
                var success = await OrganizationService.DeleteOrganizationAsync(id);
                if (success)
                {
                    Logger.LogInformation("Successfully deleted organization {OrganizationId}", id);
                    await LoadOrganizations(currentPage);
                }
                else
                {
                    Logger.LogWarning("Failed to delete organization {OrganizationId}", id);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting organization {OrganizationId}", id);
        }
    }
}