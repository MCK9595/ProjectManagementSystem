@page "/projects/{id:guid}"
@page "/projects/{id:guid}/edit"
@using ProjectManagementSystem.Shared.Client.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Models.Common
@using ProjectManagementSystem.Shared.Client.Constants
@using ProjectManagementSystem.Shared.Client.Authentication
@using ProjectManagementSystem.WebApp.Wasm.Client.Components.Project
@using ProjectManagementSystem.WebApp.Wasm.Client.Components.Project.Dashboard
@using ProjectManagementSystem.WebApp.Wasm.Client.Components.Project.Gantt
@using ProjectManagementSystem.WebApp.Wasm.Client.Components.Shared
@using ProjectManagementSystem.WebApp.Wasm.Client.Services
@using TaskStatusConst = ProjectManagementSystem.WebApp.Wasm.Client.Constants.TaskStatus
@using System.Security.Claims

@attribute [ProjectManagementSystem.WebApp.Wasm.Client.Components.Authentication.Authorize]
@inject IProjectService ProjectService
@inject IOrganizationService OrganizationService
@inject IUserService UserService
@inject ITaskService TaskService
@inject GanttTaskService GanttService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<ProjectDetail> Logger

<PageTitle>@(IsEditMode ? "Edit" : "View") Project - Project Management System</PageTitle>

@if (project != null)
{
    <!-- Project Header -->
    <ProjectHeader Project="@project"
                  ShowBackButton="true"
                  ShowEditButton="true"
                  ShowProjectStats="false"
                  CanEdit="@CanEditProject()"
                  MemberCount="@(members?.Count ?? 0)"
                  TaskCount="@(tasks?.Count ?? 0)"
                  OnBackClick="GoBack"
                  OnEditClick="ToggleEditMode" />

    <!-- Project Details Card -->
    <ProjectDetailsCard Project="@project"
                       IsEditMode="@IsEditMode"
                       CanEdit="@CanEditProject()"
                       ShowHolidayManagement="true"
                       IsSaving="@isUpdating"
                       OnEditClick="ToggleEditMode"
                       OnCancelClick="HandleCancelEdit"
                       OnSaveClick="HandleSaveProject" />

    <!-- Project Tabs -->
    <ProjectTabs ActiveTab="@activeTab"
                MemberCount="@(members?.Count ?? 0)"
                TaskCount="@(tasks?.Count ?? 0)"
                OnTabChanged="HandleTabChange"
                OverviewContent="@overviewContent"
                MembersContent="@membersContent"
                TasksContent="@tasksContent"
                GanttContent="@ganttContent" />
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <LoadingSpinner IsVisible="true" Message="Loading project details..." />
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }
    
    private ProjectDto? project;
    private List<ProjectMemberDto>? members;
    private List<TaskDto>? tasks;
    private List<OrganizationMemberDto>? organizationMembers;
    private ProjectDashboardStatsDto? dashboardStats;
    
    private bool IsEditMode => Navigation.Uri.Contains("/edit");
    private string activeTab = "overview";
    private bool isLoading = true;
    private bool isUpdating = false;
    private bool isLoadingMembers = false;
    private bool isLoadingTasks = false;
    private bool isLoadingDashboard = false;
    
    private RenderFragment overviewContent => builder =>
    {
        builder.OpenComponent<ProjectDashboard>(0);
        builder.AddAttribute(1, "IsLoading", isLoadingDashboard);
        builder.AddAttribute(2, "DashboardStats", dashboardStats);
        builder.AddAttribute(3, "ShowViewAllButtons", true);
        builder.AddAttribute(4, "CanCreateTasks", CanCreateTasks());
        builder.AddAttribute(5, "OnTaskClick", EventCallback.Factory.Create<TaskDto>(this, ViewTask));
        builder.AddAttribute(6, "OnViewAllActiveTasksClick", EventCallback.Factory.Create(this, () => HandleTabChange("tasks")));
        builder.AddAttribute(7, "OnViewAllUserTasksClick", EventCallback.Factory.Create(this, () => HandleTabChange("tasks")));
        builder.AddAttribute(8, "OnCreateTaskClick", EventCallback.Factory.Create(this, CreateTask));
        builder.CloseComponent();
    };
    
    private RenderFragment membersContent => builder =>
    {
        builder.OpenComponent<ProjectMembersList>(0);
        builder.AddAttribute(1, "IsLoading", isLoadingMembers);
        builder.AddAttribute(2, "Members", members);
        builder.AddAttribute(3, "CanManageMembers", CanManageMembers());
        builder.AddAttribute(4, "ProjectId", Id);
        builder.AddAttribute(5, "OrganizationId", project?.OrganizationId ?? Guid.Empty);
        builder.AddAttribute(6, "CurrentUserId", GetCurrentUserId());
        builder.AddAttribute(7, "IsSystemAdmin", HasRole(Roles.SystemAdmin));
        builder.AddAttribute(8, "OnMembersChanged", EventCallback.Factory.Create(this, HandleMembersChanged));
        builder.AddAttribute(9, "OnError", EventCallback.Factory.Create<string>(this, HandleMemberError));
        builder.CloseComponent();
    };
    
    private RenderFragment tasksContent => builder =>
    {
        if (isLoadingTasks)
        {
            builder.OpenComponent<LoadingSpinner>(0);
            builder.AddAttribute(1, "IsVisible", true);
            builder.AddAttribute(2, "Message", "Loading tasks...");
            builder.CloseComponent();
        }
        else if (tasks?.Any() == true)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "task-list");
            
            // Create Task button
            if (CanCreateTasks())
            {
                builder.OpenElement(2, "div");
                builder.AddAttribute(3, "class", "d-flex justify-content-between align-items-center mb-3");
                builder.OpenElement(4, "h5");
                builder.AddAttribute(5, "class", "mb-0");
                builder.AddContent(6, $"Tasks ({tasks.Count})");
                builder.CloseElement(); // h5
                builder.OpenElement(7, "button");
                builder.AddAttribute(8, "class", "btn btn-primary btn-sm");
                builder.AddAttribute(9, "onclick", EventCallback.Factory.Create(this, CreateTask));
                builder.OpenElement(10, "i");
                builder.AddAttribute(11, "class", "fas fa-plus me-1");
                builder.CloseElement(); // i
                builder.AddContent(12, "Create Task");
                builder.CloseElement(); // button
                builder.CloseElement(); // div
            }
            
            // Task cards
            builder.OpenElement(13, "div");
            builder.AddAttribute(14, "class", "row g-3");
            foreach (var task in tasks.OrderByDescending(t => t.CreatedAt))
            {
                builder.OpenElement(15, "div");
                builder.AddAttribute(16, "class", "col-12");
                builder.OpenComponent<TaskCard>(17);
                builder.AddAttribute(18, "Task", task);
                builder.AddAttribute(19, "ShowStatus", true);
                builder.AddAttribute(20, "ShowPriority", true);
                builder.AddAttribute(21, "ShowDueDate", true);
                builder.AddAttribute(22, "ShowAssignee", true);
                builder.AddAttribute(23, "Clickable", true);
                builder.AddAttribute(24, "OnClick", EventCallback.Factory.Create<TaskDto>(this, (t) => ViewTask(t)));
                builder.CloseComponent();
                builder.CloseElement(); // div col-12
            }
            builder.CloseElement(); // div row
            
            builder.CloseElement(); // div task-list
        }
        else
        {
            builder.OpenComponent<EmptyState>(0);
            builder.AddAttribute(1, "IsVisible", true);
            builder.AddAttribute(2, "IconClass", "fas fa-tasks");
            builder.AddAttribute(3, "Title", "No tasks");
            builder.AddAttribute(4, "Description", "This project doesn't have any tasks yet.");
            builder.AddAttribute(5, "ShowAction", CanCreateTasks());
            builder.AddAttribute(6, "ActionText", "Create Task");
            builder.AddAttribute(7, "ActionIconClass", "fas fa-plus");
            builder.AddAttribute(8, "OnActionClick", EventCallback.Factory.Create(this, CreateTask));
            builder.CloseComponent();
        }
    };
    
    private RenderFragment ganttContent => builder =>
    {
        builder.OpenComponent<ProjectGanttChart>(0);
        builder.AddAttribute(1, "ProjectId", Id);
        builder.AddAttribute(2, "IsLoading", isLoadingTasks);
        builder.AddAttribute(3, "Tasks", tasks);
        builder.AddAttribute(4, "ShowCreateAction", CanCreateTasks());
        builder.AddAttribute(5, "OnRefreshClick", EventCallback.Factory.Create(this, LoadTasks));
        builder.AddAttribute(6, "OnCreateTaskClick", EventCallback.Factory.Create(this, CreateTask));
        builder.AddAttribute(7, "OnTaskClick", EventCallback.Factory.Create<Guid>(this, ViewTaskById));
        builder.CloseComponent();
    };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadProject();
        await LoadInitialData();
    }
    
    private async Task LoadProject()
    {
        try
        {
            isLoading = true;
            project = await ProjectService.GetProjectAsync(Id);
            
            if (project == null)
            {
                Navigation.NavigateTo("/projects");
                return;
            }
            
            // Load current user's membership after project is loaded
            if (currentUser?.Identity?.IsAuthenticated == true)
            {
                await LoadCurrentUserMembership();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load project {ProjectId}", Id);
            Navigation.NavigateTo("/projects");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadInitialData()
    {
        if (project == null) return;
        
        // Load data for the initial tab
        await LoadDataForTab(activeTab);
    }
    
    private async Task LoadDataForTab(string tab)
    {
        switch (tab)
        {
            case "overview":
                await LoadDashboardStats();
                break;
            case "members":
                await LoadMembers();
                break;
            case "tasks":
                await LoadTasks();
                break;
            case "gantt":
                await LoadTasks(); // Gantt needs tasks
                break;
        }
    }
    
    private async Task LoadDashboardStats()
    {
        try
        {
            isLoadingDashboard = true;
            dashboardStats = await TaskService.GetProjectDashboardStatsAsync(Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load dashboard stats for project {ProjectId}", Id);
        }
        finally
        {
            isLoadingDashboard = false;
        }
    }
    
    private async Task LoadMembers()
    {
        try
        {
            isLoadingMembers = true;
            var membersResult = await ProjectService.GetProjectMembersAsync(Id);
            members = membersResult.Items.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load members for project {ProjectId}", Id);
        }
        finally
        {
            isLoadingMembers = false;
        }
    }
    
    private async Task LoadTasks()
    {
        try
        {
            isLoadingTasks = true;
            var taskResult = await TaskService.GetTasksAsync(Id, 1, 100); // Get first 100 tasks
            tasks = taskResult.Items.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load tasks for project {ProjectId}", Id);
        }
        finally
        {
            isLoadingTasks = false;
        }
    }
    
    private async Task HandleTabChange(string tab)
    {
        activeTab = tab;
        await LoadDataForTab(tab);
    }
    
    private void GoBack()
    {
        Navigation.NavigateTo("/projects");
    }
    
    private void ToggleEditMode()
    {
        if (IsEditMode)
        {
            Navigation.NavigateTo($"/projects/{Id}");
        }
        else
        {
            Navigation.NavigateTo($"/projects/{Id}/edit");
        }
    }
    
    private async Task HandleCancelEdit()
    {
        await LoadProject(); // Reload original data
        Navigation.NavigateTo($"/projects/{Id}");
    }
    
    private async Task HandleSaveProject(ProjectDto updatedProject)
    {
        try
        {
            isUpdating = true;
            var updateDto = new UpdateProjectDto
            {
                Name = updatedProject.Name,
                Description = updatedProject.Description,
                Status = updatedProject.Status,
                Priority = updatedProject.Priority,
                StartDate = updatedProject.StartDate,
                EndDate = updatedProject.EndDate,
                HolidayDates = updatedProject.HolidayDates
            };
            await ProjectService.UpdateProjectAsync(Id, updateDto);
            project = updatedProject;
            Navigation.NavigateTo($"/projects/{Id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update project {ProjectId}", Id);
            // TODO: Show error message to user
        }
        finally
        {
            isUpdating = false;
        }
    }
    
    private void ViewTask(TaskDto task)
    {
        Navigation.NavigateTo($"/tasks/{task.Id}");
    }
    
    private void ViewTaskById(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/{taskId}");
    }
    
    private void CreateTask()
    {
        Navigation.NavigateTo($"/tasks/create?ProjectId={Id}");
    }
    
    private async Task HandleMembersChanged()
    {
        await LoadMembers();
    }
    
    private void HandleMemberError(string errorMessage)
    {
        // TODO: Show error message to user (could use a toast notification or alert)
        Logger.LogWarning("Member management error: {ErrorMessage}", errorMessage);
        
        // For now, just log the error. In a real implementation, you would show this to the user
        // through a toast notification, alert dialog, or status message
    }
    
    private ClaimsPrincipal? currentUser;
    private ProjectMemberDto? currentUserMembership;
    
    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            currentUser = authState.User;
            
            // Load current user's membership for this project
            if (currentUser?.Identity?.IsAuthenticated == true && project != null)
            {
                await LoadCurrentUserMembership();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load current user authentication state");
        }
    }
    
    private async Task LoadCurrentUserMembership()
    {
        try
        {
            if (currentUser == null || project == null) return;
            
            var userIdClaim = currentUser.FindFirst("sub") ?? currentUser.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim?.Value != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                var membersResult = await ProjectService.GetProjectMembersAsync(Id);
                currentUserMembership = membersResult?.Items?.FirstOrDefault(m => m.UserId == userId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load current user membership for project {ProjectId}", Id);
        }
    }
    
    private bool CanEditProject()
    {
        if (currentUser?.Identity?.IsAuthenticated != true) return false;
        
        // System admins can edit any project
        if (HasRole(Roles.SystemAdmin)) return true;
        
        // Organization owners and admins can edit projects in their organization
        if (project != null && (HasRole(Roles.OrganizationOwner) || HasRole(Roles.OrganizationAdmin) || HasRole(Roles.OrgAdmin)))
        {
            // Additional check: ensure the user belongs to the project's organization
            // This would require organization membership verification
            return true;
        }
        
        // Project managers and admins can edit their projects
        if (currentUserMembership != null)
        {
            return currentUserMembership.Role == Roles.ProjectManager || 
                   currentUserMembership.Role == Roles.ProjectAdmin;
        }
        
        return false;
    }
    
    private bool CanManageMembers()
    {
        if (currentUser?.Identity?.IsAuthenticated != true) return false;
        
        // System admins can manage members of any project
        if (HasRole(Roles.SystemAdmin)) return true;
        
        // Organization owners and admins can manage members of projects in their organization
        if (project != null && (HasRole(Roles.OrganizationOwner) || HasRole(Roles.OrganizationAdmin) || HasRole(Roles.OrgAdmin)))
        {
            return true;
        }
        
        // Project managers and admins can manage members of their projects
        if (currentUserMembership != null)
        {
            return currentUserMembership.Role == Roles.ProjectManager || 
                   currentUserMembership.Role == Roles.ProjectAdmin;
        }
        
        return false;
    }
    
    private bool CanCreateTasks()
    {
        if (currentUser?.Identity?.IsAuthenticated != true) return false;
        
        // System admins can create tasks in any project
        if (HasRole(Roles.SystemAdmin)) return true;
        
        // Organization members can create tasks in their organization's projects
        if (project != null && (HasRole(Roles.OrganizationOwner) || HasRole(Roles.OrganizationAdmin) || 
                               HasRole(Roles.OrganizationMember) || HasRole(Roles.OrgAdmin) || HasRole(Roles.OrgMember)))
        {
            return true;
        }
        
        // Project members can create tasks, but viewers cannot
        if (currentUserMembership != null)
        {
            return currentUserMembership.Role != Roles.ProjectViewer;
        }
        
        return false;
    }
    
    private bool HasRole(string role)
    {
        return currentUser?.IsInRole(role) == true || 
               currentUser?.HasClaim(ClaimTypes.Role, role) == true;
    }
    
    private int GetCurrentUserId()
    {
        if (currentUser?.Identity?.IsAuthenticated != true) return 0;
        
        var userIdClaim = currentUser.FindFirst("sub") ?? currentUser.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim?.Value != null && int.TryParse(userIdClaim.Value, out int userId))
        {
            return userId;
        }
        
        return 0;
    }
}