@page "/projects/{id:guid}"
@page "/projects/{id:guid}/edit"
@using ProjectManagementSystem.Shared.Client.Services
@using ProjectManagementSystem.Shared.Models.DTOs
@using ProjectManagementSystem.Shared.Models.Common
@using ProjectManagementSystem.Shared.Client.Constants
@using ProjectManagementSystem.Shared.Client.Authentication
@using TaskStatusConst = ProjectManagementSystem.WebApp.Wasm.Client.Constants.TaskStatus

@attribute [ProjectManagementSystem.WebApp.Wasm.Client.Components.Authentication.Authorize]
@inject IProjectService ProjectService
@inject IOrganizationService OrganizationService
@inject IUserService UserService
@inject ITaskService TaskService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<ProjectDetail> Logger

<PageTitle>@(IsEditMode ? "Edit" : "View") Project - Project Management System</PageTitle>

@if (project != null)
{
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4" style="max-width: 100%; overflow: hidden;">
        <div>
            <h2 class="mb-2" style="font-weight: var(--font-weight-semibold); color: var(--color-gray-900);">@(IsEditMode ? "Edit" : "View") Project</h2>
            <p class="text-muted mb-0" style="font-size: var(--font-size-sm);">@project.Name</p>
        </div>
        <div>
            @if (!IsEditMode && CanEditProject())
            {
                <button class="btn btn-outline-primary me-2" @onclick="ToggleEditMode">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            }
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="bi bi-arrow-left"></i> Back
            </button>
        </div>
    </div>

    <!-- Main Content Card -->
    <div class="card mb-4" style="width: 100%; max-width: 100%; overflow: hidden;">
        <div class="card-body">
            @if (IsEditMode)
            {
                <EditForm Model="@updateModel" OnValidSubmit="@HandleUpdate">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="name" class="form-label">Project Name <span class="text-danger">*</span></label>
                                <InputText id="name" @bind-Value="updateModel.Name" class="form-control" />
                                <ValidationMessage For="@(() => updateModel.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" @bind-Value="updateModel.Description" class="form-control" rows="4" />
                                <ValidationMessage For="@(() => updateModel.Description)" />
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="status" class="form-label">Status</label>
                                        <InputSelect id="status" @bind-Value="updateModel.Status" class="form-select">
                                            @foreach (var status in ProjectStatus.AllStatuses)
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateModel.Status)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="priority" class="form-label">Priority</label>
                                        <InputSelect id="priority" @bind-Value="updateModel.Priority" class="form-select">
                                            @foreach (var priority in Priority.AllPriorities)
                                            {
                                                <option value="@priority">@priority</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => updateModel.Priority)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="startDate" class="form-label">Start Date</label>
                                        <InputDate id="startDate" @bind-Value="updateModel.StartDate" class="form-control" />
                                        <ValidationMessage For="@(() => updateModel.StartDate)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="endDate" class="form-label">End Date</label>
                                        <InputDate id="endDate" @bind-Value="updateModel.EndDate" class="form-control" />
                                        <ValidationMessage For="@(() => updateModel.EndDate)" />
                                        @if (updateModel.StartDate.HasValue && updateModel.EndDate.HasValue && updateModel.EndDate < updateModel.StartDate)
                                        {
                                            <div class="text-danger small">End date must be after start date</div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="CancelEdit">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Save Changes
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="row">
                    <div class="col-md-8">
                        <h5>Project Details</h5>
                        <dl class="row">
                            <dt class="col-sm-3">Name:</dt>
                            <dd class="col-sm-9">@project.Name</dd>
                            
                            <dt class="col-sm-3">Description:</dt>
                            <dd class="col-sm-9">@(project.Description ?? "No description provided")</dd>
                            
                            <dt class="col-sm-3">Organization:</dt>
                            <dd class="col-sm-9">
                                @if (project.Organization != null)
                                {
                                    <a href="/organizations/@project.Organization.Id" class="text-decoration-none">@project.Organization.Name</a>
                                }
                                else
                                {
                                    <span class="text-muted">Loading...</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Created By:</dt>
                            <dd class="col-sm-9">
                                @if (isLoadingCreator)
                                {
                                    <span class="text-muted">Loading...</span>
                                }
                                else if (creatorUser != null)
                                {
                                    <span>@creatorUser.Username</span>
                                    @if (!string.IsNullOrEmpty(creatorUser.Email))
                                    {
                                        <br /><small class="text-muted">@creatorUser.Email</small>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted">Unknown User</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Status:</dt>
                            <dd class="col-sm-9">
                                <span class="badge bg-@GetStatusBadgeColor(project.Status)">@project.Status</span>
                            </dd>
                            
                            <dt class="col-sm-3">Priority:</dt>
                            <dd class="col-sm-9">
                                <span class="badge bg-@GetPriorityBadgeColor(project.Priority)">@project.Priority</span>
                            </dd>
                            
                            <dt class="col-sm-3">Start Date:</dt>
                            <dd class="col-sm-9">@(project.StartDate?.ToString("MMMM dd, yyyy") ?? "Not set")</dd>
                            
                            <dt class="col-sm-3">End Date:</dt>
                            <dd class="col-sm-9">@(project.EndDate?.ToString("MMMM dd, yyyy") ?? "Not set")</dd>
                            
                            <dt class="col-sm-3">Created:</dt>
                            <dd class="col-sm-9">@project.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                            
                            <dt class="col-sm-3">Last Updated:</dt>
                            <dd class="col-sm-9">@project.UpdatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</dd>
                        </dl>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-light">
                            <div class="card-header">
                                <h6 class="mb-0">Project Statistics</h6>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-6">
                                        <div class="h4 mb-1">@(members?.TotalCount ?? 0)</div>
                                        <div class="small text-muted">Members</div>
                                    </div>
                                    <div class="col-6">
                                        <div class="h4 mb-1">@(projectTasks?.TotalCount ?? 0)</div>
                                        <div class="small text-muted">Tasks</div>
                                    </div>
                                </div>
                                @if (project.StartDate.HasValue && project.EndDate.HasValue)
                                {
                                    <hr class="my-3">
                                    <div class="text-center">
                                        <small class="text-muted">Project Duration</small>
                                        <div class="fw-bold">@GetProjectDuration() days</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (!IsEditMode)
    {
        <!-- Project Members Section -->
        <div class="card mt-4" style="width: 100%; max-width: 100%; overflow: hidden;">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5>Project Members</h5>
                    @if (CanManageMembers())
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(async () => await OpenAddMemberModal())">
                            <i class="bi bi-person-plus"></i> Add Member
                        </button>
                    }
                </div>
            </div>
            <div class="card-body">
                @if (isLoadingMembers)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading members...</span>
                        </div>
                    </div>
                }
                else if (members?.Items?.Any() == true)
                {
                    <div class="table-responsive" style="width: 100%; overflow-x: auto;">
                        <table class="table table-hover table-striped table-sm" style="min-width: 600px; table-layout: fixed; width: 100%;">
                            <thead>
                                <tr>
                                    <th style="width: 35%;">User</th>
                                    <th style="width: 20%;">Role</th>
                                    <th style="width: 20%;">Joined Date</th>
                                    <th style="width: 25%;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var member in members.Items)
                                {
                                    <tr>
                                        <td class="text-truncate">
                                            <div>
                                                <strong class="d-block text-truncate" title="@member.User?.Username">@(member.User?.Username ?? "Unknown User")</strong>
                                                <small class="text-muted text-truncate d-block" title="@member.User?.Email">@(member.User?.Email ?? "No email")</small>
                                            </div>
                                        </td>
                                        <td>
                                            @if (CanManageMembers() && currentUser?.Id != member.UserId)
                                            {
                                                <div class="d-flex align-items-center gap-2">
                                                    <select class="form-select form-select-sm" style="max-width: 140px;" @onchange="(e) => UpdateMemberRole(member.UserId, e.Value?.ToString() ?? member.Role)" disabled="@isProcessing">
                                                        <option value="@Roles.ProjectMember" selected="@(member.Role == Roles.ProjectMember)">Member</option>
                                                        <option value="@Roles.ProjectManager" selected="@(member.Role == Roles.ProjectManager)">Manager</option>
                                                    </select>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center">
                                                    <span class="badge bg-@GetProjectRoleBadgeColor(member.Role) me-1">@GetProjectRoleDisplayName(member.Role)</span>
                                                    @if (currentUser?.Id == member.UserId)
                                                    {
                                                        <small class="text-muted">(You)</small>
                                                    }
                                                </div>
                                            }
                                        </td>
                                        <td class="text-truncate">@member.JoinedAt.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            @if (CanManageMembers() && currentUser?.Id != member.UserId)
                                            {
                                                <div class="d-flex gap-1">
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemoveMember(member.UserId)" 
                                                            disabled="@isProcessing"
                                                            title="Remove member from project">
                                                        @if (isProcessing)
                                                        {
                                                            <span class="spinner-border spinner-border-sm"></span>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-person-dash"></i>
                                                        }
                                                    </button>
                                                </div>
                                            }
                                            else if (currentUser?.Id == member.UserId)
                                            {
                                                <span class="text-muted small">
                                                    <i class="bi bi-person-check me-1"></i>
                                                    You cannot manage your own membership
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No actions available</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No members found in this project.</p>
                }
            </div>
        </div>

        <!-- Add Member Modal -->
        @if (showAddMemberModal)
        {
            <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add Project Member</h5>
                            <button type="button" class="btn-close" @onclick="CloseAddMemberModal"></button>
                        </div>
                        <div class="modal-body">
                            @if (isLoadingOrganizationMembers)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading organization members...</span>
                                    </div>
                                    <p class="mt-2">Loading organization members...</p>
                                </div>
                            }
                            else if (availableOrganizationMembers.Any())
                            {
                                <div class="mb-3">
                                    <label for="organizationMemberSelect" class="form-label">Select Organization Member</label>
                                    <select class="form-select" id="organizationMemberSelect" @bind="selectedOrganizationMemberId" @bind:after="OnSelectedMemberChanged">
                                        <option value="0">-- Select a member --</option>
                                        @foreach (var orgMember in availableOrganizationMembers)
                                        {
                                            <option value="@orgMember.UserId">
                                                @($"{orgMember.User?.FirstName} {orgMember.User?.LastName} ({orgMember.User?.Email}) - {orgMember.Role}")
                                            </option>
                                        }
                                    </select>
                                </div>

                                @if (selectedOrganizationMember != null)
                                {
                                    <div class="mb-3">
                                        <label for="memberRole" class="form-label">Project Role</label>
                                        <select class="form-select" id="memberRole" @bind="selectedRole">
                                            <option value="@Roles.ProjectMember">Member</option>
                                            <option value="@Roles.ProjectManager">Manager</option>
                                        </select>
                                    </div>

                                    <div class="alert alert-info">
                                        <strong>Selected Member:</strong> @selectedOrganizationMember.User?.FirstName @selectedOrganizationMember.User?.LastName (@selectedOrganizationMember.User?.Email)
                                        <br />
                                        <strong>Organization Role:</strong> @selectedOrganizationMember.Role
                                        <br />
                                        <strong>Project Role:</strong> @(selectedRole == Roles.ProjectMember ? "Member" : "Manager")
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    <strong>No available members</strong>
                                    <br />
                                    All organization members with appropriate permissions are already part of this project, or there are no organization members with Member or higher roles.
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddMemberModal">Cancel</button>
                            <button type="button" 
                                    class="btn btn-primary" 
                                    @onclick="AddMember" 
                                    disabled="@(selectedOrganizationMember == null || isAddingMember)">
                                @if (isAddingMember)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Add Member
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Project Tasks Section -->
        <div class="card mt-4" style="width: 100%; max-width: 100%; overflow: hidden;">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5>Tasks</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="ToggleTaskView">
                            <i class="bi @(isTaskKanbanView ? "bi-list" : "bi-kanban")"></i> 
                            @(isTaskKanbanView ? "List" : "Kanban")
                        </button>
                        @if (CanCreateTask())
                        {
                            <button class="btn btn-sm btn-outline-primary" @onclick="CreateTask">
                                <i class="bi bi-plus-circle"></i> Add Task
                            </button>
                        }
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (isLoadingTasks)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading tasks...</span>
                        </div>
                    </div>
                }
                else if (projectTasks?.Items?.Any() == true)
                {
                    @if (isTaskKanbanView)
                    {
                        <!-- Mini Kanban View -->
                        <div class="row">
                            @foreach (var status in taskStatuses)
                            {
                                <div class="col-md-3 mb-3">
                                    <div class="card bg-light">
                                        <div class="card-header p-2">
                                            <small class="text-muted fw-bold">@status</small>
                                            <span class="badge bg-secondary float-end">@GetTaskCountByStatus(status)</span>
                                        </div>
                                        <div class="card-body p-2" style="min-height: 200px; max-height: 300px; overflow-y: auto;">
                                            @foreach (var task in GetTasksByStatus(status))
                                            {
                                                <div class="card mb-2 shadow-sm" style="cursor: pointer;" @onclick="() => ViewTask(task.Id)">
                                                    <div class="card-body p-2">
                                                        <h6 class="card-title mb-1 small">@task.Title</h6>
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <span class="badge bg-@GetTaskPriorityBadgeColor(task.Priority) small">@task.Priority</span>
                                                            @if (task.DueDate.HasValue)
                                                            {
                                                                <small class="text-muted">@task.DueDate.Value.ToString("MMM dd")</small>
                                                            }
                                                        </div>
                                                        @if (task.AssignedTo != null)
                                                        {
                                                            <div class="mt-1">
                                                                <small class="text-muted">@task.AssignedTo.Username</small>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <!-- List View -->
                        <div class="table-responsive">
                            <table class="table table-hover table-sm">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Status</th>
                                        <th>Priority</th>
                                        <th>Assigned To</th>
                                        <th>Due Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in projectTasks.Items)
                                    {
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong class="small">@task.Title</strong>
                                                    @if (!string.IsNullOrEmpty(task.Description))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@(task.Description.Length > 40 ? task.Description.Substring(0, 40) + "..." : task.Description)</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-@GetTaskStatusBadgeColor(task.Status) small">@task.Status</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-@GetTaskPriorityBadgeColor(task.Priority) small">@task.Priority</span>
                                            </td>
                                            <td>
                                                @if (task.AssignedTo != null)
                                                {
                                                    <small>@task.AssignedTo.Username</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">Unassigned</small>
                                                }
                                            </td>
                                            <td>
                                                @if (task.DueDate.HasValue)
                                                {
                                                    <small class="@(task.DueDate < DateTime.UtcNow && task.Status != TaskStatusConst.Done ? "text-danger" : "")">
                                                        @task.DueDate.Value.ToString("MMM dd")
                                                    </small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">No due</small>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTask(task.Id)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    
                    @if (projectTasks.TotalCount > 10)
                    {
                        <div class="mt-3 text-center">
                            <a href="/tasks?projectId=@Id" class="btn btn-sm btn-outline-primary">
                                View All Tasks (@projectTasks.TotalCount)
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-list-check" style="font-size: 2rem; color: #6c757d;"></i>
                        <h6 class="mt-2">No tasks yet</h6>
                        <p class="text-muted small">Create your first task to get started.</p>
                        @if (CanCreateTask())
                        {
                            <button class="btn btn-sm btn-primary" @onclick="CreateTask">
                                <i class="bi bi-plus-circle"></i> Create First Task
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    }
}
else if (isLoading)
{
    <div class="container text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading project...</p>
    </div>
}
else
{
    <div class="container">
        <div class="alert alert-danger">
            Project not found or you don't have permission to view it.
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private ProjectDto? project;
    private PagedResult<ProjectMemberDto>? members;
    private PagedResult<TaskDto>? projectTasks;
    private UpdateProjectDto updateModel = new();
    private bool isLoading = true;
    private bool isLoadingMembers = false;
    private bool isLoadingTasks = false;
    private bool isProcessing = false;
    private UserDto? creatorUser = null;
    private bool isLoadingCreator = false;
    private bool isTaskKanbanView = true;
    private bool IsEditMode => Navigation.Uri.Contains("/edit");
    private string errorMessage = string.Empty;
    private UserDto? currentUser;
    private readonly string[] taskStatuses = { TaskStatusConst.ToDo, TaskStatusConst.InProgress, TaskStatusConst.InReview, TaskStatusConst.Done };
    
    // Add member modal variables
    private bool showAddMemberModal = false;
    private List<OrganizationMemberDto> availableOrganizationMembers = new();
    private OrganizationMemberDto? selectedOrganizationMember = null;
    private int selectedOrganizationMemberId = 0;
    private string selectedRole = Roles.ProjectMember;
    private bool isLoadingOrganizationMembers = false;
    private bool isAddingMember = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("ProjectDetail component initialized (WebAssembly) - Project ID: {ProjectId}, IsEditMode: {IsEditMode}", Id, IsEditMode);
        await LoadCurrentUser();
        await LoadProject();
        if (!IsEditMode)
        {
            await LoadMembers();
            await LoadProjectTasks();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentUser();
        await LoadProject();
        if (!IsEditMode)
        {
            await LoadMembers();
            await LoadProjectTasks();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    currentUser = await UserService.GetUserByIdAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading current user in ProjectDetail (WebAssembly)");
        }
    }

    private async Task LoadProject()
    {
        isLoading = true;
        try
        {
            project = await ProjectService.GetProjectAsync(Id);
            if (project != null)
            {
                updateModel.Name = project.Name;
                updateModel.Description = project.Description;
                updateModel.Status = project.Status;
                updateModel.Priority = project.Priority;
                updateModel.StartDate = project.StartDate;
                updateModel.EndDate = project.EndDate;
                
                // Load creator information
                await LoadCreator();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading project {ProjectId} in ProjectDetail (WebAssembly)", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCreator()
    {
        if (project == null) return;
        
        isLoadingCreator = true;
        try
        {
            Logger.LogDebug("Loading creator for user ID: {UserId}", project.CreatedByUserId);
            creatorUser = await UserService.GetUserByIdAsync(project.CreatedByUserId);
            
            if (creatorUser != null)
            {
                Logger.LogDebug("Successfully loaded creator: {Username} ({Email})", creatorUser.Username, creatorUser.Email);
            }
            else
            {
                Logger.LogWarning("Creator user not found for ID: {UserId}", project.CreatedByUserId);
                var lastError = UserService.GetLastError();
                if (!string.IsNullOrEmpty(lastError))
                {
                    Logger.LogWarning("UserService error: {Error}", lastError);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception loading creator for user ID: {UserId}", project?.CreatedByUserId);
        }
        finally
        {
            isLoadingCreator = false;
        }
    }

    private async Task LoadMembers()
    {
        isLoadingMembers = true;
        try
        {
            members = await ProjectService.GetProjectMembersAsync(Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading members for project {ProjectId}", Id);
        }
        finally
        {
            isLoadingMembers = false;
        }
    }

    private async Task HandleUpdate()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Validate dates
            if (updateModel.StartDate.HasValue && updateModel.EndDate.HasValue && updateModel.EndDate < updateModel.StartDate)
            {
                errorMessage = "End date must be after start date.";
                return;
            }

            var result = await ProjectService.UpdateProjectAsync(Id, updateModel);
            
            if (result != null)
            {
                project = result;
                Navigation.NavigateTo($"/projects/{Id}");
            }
            else
            {
                errorMessage = "Failed to update project. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the project. Please try again.";
            Logger.LogError(ex, "Error updating project {ProjectId}", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanEditProject()
    {
        if (currentUser == null || project == null) return false;
        
        // System admin can edit any project
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Check if user is project manager
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.ProjectManager;
    }

    private bool CanManageMembers()
    {
        if (currentUser == null || project == null) return false;
        
        // System admin can manage members in any project
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Check if user is project manager
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership?.Role == Roles.ProjectManager;
    }

    private async Task UpdateMemberRole(int userId, string newRole)
    {
        if (isProcessing) return;
        
        var member = members?.Items?.FirstOrDefault(m => m.UserId == userId);
        if (member == null) return;
        
        // Prevent self-modification
        if (currentUser?.Id == userId)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You cannot modify your own role.");
            return;
        }
        
        var memberName = member.User?.Username ?? "Unknown User";
        var currentRoleDisplay = GetProjectRoleDisplayName(member.Role);
        var newRoleDisplay = GetProjectRoleDisplayName(newRole);
        
        // Create more descriptive confirmation message
        var actionType = newRole == Roles.ProjectManager ? "promote" : "demote";
        var roleDescription = newRole == Roles.ProjectManager 
            ? "Project Manager (can manage members, edit project settings)" 
            : "Project Member (can view project and manage tasks)";
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to {actionType} '{memberName}' from {currentRoleDisplay} to {newRoleDisplay}?\\n\\n" +
            $"New role: {roleDescription}");
        if (!confirmed) 
        {
            return;
        }
        
        isProcessing = true;
        try
        {
            var success = await ProjectService.UpdateMemberRoleAsync(Id, userId, newRole);
            if (success)
            {
                await LoadMembers(); // Refresh the member list
                
                // Show success message with role description
                var successMessage = newRole == Roles.ProjectManager 
                    ? $"'{memberName}' has been promoted to Project Manager and can now manage project members and settings."
                    : $"'{memberName}' has been demoted to Project Member and can now view project and manage tasks.";
                
                await JSRuntime.InvokeVoidAsync("alert", successMessage);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update member role. Please check your permissions and try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating member role for project {ProjectId}, user {UserId}", Id, userId);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while updating the member role. Please try again.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RemoveMember(int userId)
    {
        if (isProcessing) return;
        
        var member = members?.Items?.FirstOrDefault(m => m.UserId == userId);
        if (member == null) return;
        
        var memberName = member.User?.Username ?? "Unknown User";
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to remove '{memberName}' from the project?\n\nThis action cannot be undone.");
        if (!confirmed) return;
        
        isProcessing = true;
        try
        {
            var success = await ProjectService.RemoveMemberAsync(Id, userId);
            if (success)
            {
                await LoadMembers(); // Refresh the member list
                await JSRuntime.InvokeVoidAsync("alert", $"'{memberName}' has been successfully removed from the project.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to remove member. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing member from project {ProjectId}, user {UserId}", Id, userId);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while removing the member.");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task OpenAddMemberModal()
    {
        showAddMemberModal = true;
        selectedOrganizationMember = null;
        selectedOrganizationMemberId = 0;
        selectedRole = Roles.ProjectMember;
        await LoadAvailableOrganizationMembers();
    }

    private void CloseAddMemberModal()
    {
        showAddMemberModal = false;
        availableOrganizationMembers.Clear();
        selectedOrganizationMember = null;
        selectedOrganizationMemberId = 0;
        selectedRole = Roles.ProjectMember;
    }

    private async Task LoadAvailableOrganizationMembers()
    {
        if (project?.OrganizationId == null) return;
        
        isLoadingOrganizationMembers = true;
        try
        {
            var organizationMembers = await OrganizationService.GetOrganizationMembersAsync(project.OrganizationId, 1, 100);
            if (organizationMembers?.Items != null)
            {
                // Filter to members with Member or higher roles (exclude regular users)
                var eligibleMembers = organizationMembers.Items
                    .Where(om => om.Role == Roles.OrganizationMember || 
                                om.Role == Roles.OrganizationAdmin || 
                                om.Role == Roles.OrganizationOwner)
                    .ToList();
                
                // Filter out users who are already project members
                var existingMemberIds = members?.Items?.Select(m => m.UserId).ToHashSet() ?? new HashSet<int>();
                availableOrganizationMembers = eligibleMembers
                    .Where(om => !existingMemberIds.Contains(om.UserId))
                    .OrderBy(om => om.User?.FirstName)
                    .ThenBy(om => om.User?.LastName)
                    .ToList();
            }
            else
            {
                availableOrganizationMembers.Clear();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading organization members for project {ProjectId}", Id);
            availableOrganizationMembers.Clear();
        }
        finally
        {
            isLoadingOrganizationMembers = false;
        }
    }

    private void OnSelectedMemberChanged()
    {
        selectedOrganizationMember = availableOrganizationMembers.FirstOrDefault(m => m.UserId == selectedOrganizationMemberId);
    }

    private async Task AddMember()
    {
        if (selectedOrganizationMember == null)
            return;

        isAddingMember = true;
        try
        {
            var addMemberDto = new AddProjectMemberDto
            {
                UserId = selectedOrganizationMember.UserId,
                Role = selectedRole
            };

            var result = await ProjectService.AddMemberAsync(Id, addMemberDto);
            if (result != null)
            {
                await LoadMembers(); // Refresh the member list
                CloseAddMemberModal();
                var memberName = selectedOrganizationMember.User?.FirstName + " " + selectedOrganizationMember.User?.LastName;
                await JSRuntime.InvokeVoidAsync("alert", $"'{memberName}' has been successfully added to the project.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to add member. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding member to project {ProjectId}", Id);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while adding the member.");
        }
        finally
        {
            isAddingMember = false;
        }
    }

    private string GetStatusBadgeColor(string status)
    {
        return status switch
        {
            ProjectStatus.Planning => "secondary",
            ProjectStatus.Active => "success",
            ProjectStatus.OnHold => "warning",
            ProjectStatus.Completed => "info",
            ProjectStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private string GetPriorityBadgeColor(string priority)
    {
        return priority switch
        {
            Priority.Critical => "danger",
            Priority.High => "warning",
            Priority.Medium => "primary",
            Priority.Low => "info",
            _ => "secondary"
        };
    }

    private string GetProjectRoleBadgeColor(string role)
    {
        return role switch
        {
            Roles.ProjectManager => "primary",
            Roles.ProjectMember => "secondary",
            _ => "light"
        };
    }

    private string GetProjectRoleDisplayName(string role)
    {
        return role switch
        {
            Roles.ProjectManager => "Manager",
            Roles.ProjectMember => "Member",
            _ => role
        };
    }

    private int GetProjectDuration()
    {
        if (project?.StartDate.HasValue == true && project?.EndDate.HasValue == true)
        {
            return (int)(project.EndDate.Value - project.StartDate.Value).TotalDays;
        }
        return 0;
    }

    private void ToggleEditMode()
    {
        Navigation.NavigateTo($"/projects/{Id}/edit");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/projects/{Id}");
    }

    private async Task LoadProjectTasks()
    {
        isLoadingTasks = true;
        try
        {
            projectTasks = await TaskService.GetTasksAsync(Id, 1, 20); // Load first 20 tasks
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tasks for project {ProjectId}", Id);
        }
        finally
        {
            isLoadingTasks = false;
        }
    }

    private bool CanCreateTask()
    {
        if (currentUser == null || project == null) return false;
        
        // System admin can create tasks in any project
        if (currentUser.Role == Roles.SystemAdmin) return true;
        
        // Project members and above can create tasks
        var userMembership = members?.Items?.FirstOrDefault(m => m.UserId == currentUser.Id);
        return userMembership != null;
    }

    private void ToggleTaskView()
    {
        isTaskKanbanView = !isTaskKanbanView;
    }

    private IEnumerable<TaskDto> GetTasksByStatus(string status)
    {
        return projectTasks?.Items?.Where(t => t.Status == status) ?? Enumerable.Empty<TaskDto>();
    }

    private int GetTaskCountByStatus(string status)
    {
        return GetTasksByStatus(status).Count();
    }

    private void CreateTask()
    {
        Navigation.NavigateTo($"/tasks/create?projectId={Id}");
    }

    private void ViewTask(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/{taskId}");
    }

    private string GetTaskStatusBadgeColor(string status)
    {
        return status switch
        {
            TaskStatusConst.ToDo => "secondary",
            TaskStatusConst.InProgress => "warning text-dark",
            TaskStatusConst.InReview => "info",
            TaskStatusConst.Done => "success",
            _ => "secondary"
        };
    }

    private string GetTaskPriorityBadgeColor(string priority)
    {
        return priority switch
        {
            Priority.Critical => "danger",
            Priority.High => "warning text-dark",
            Priority.Medium => "primary",
            Priority.Low => "info",
            _ => "secondary"
        };
    }

    private void GoBack()
    {
        if (project?.Organization != null)
        {
            Navigation.NavigateTo($"/organizations/{project.Organization.Id}");
        }
        else
        {
            Navigation.NavigateTo("/projects");
        }
    }
}